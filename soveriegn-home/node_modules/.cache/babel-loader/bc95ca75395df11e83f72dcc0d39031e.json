{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport { DndContext, useDraggable, DragOverlay } from '@dnd-kit/core';\nimport { Draggable } from './Draggable';\nimport { Droppable_Green } from './Droppable_green';\nimport { Droppable_white } from './Droppable_white';\nimport { Draggable2 } from './Draggable2';\nimport './DraggableProperties';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar num_G = 0; //var num_B = 2;\n\nvar draggableCheckers = new Map();\nvar count = 0;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\nfunction buildGrid() {\n  var grid = [];\n  var element = 1;\n\n  for (let y = 1; y < 11; y++) {\n    grid[y] = [];\n\n    for (let x = 1; x < 11; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\nfunction DraggableItem({\n  handle\n}) {\n  _s();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item' + num_G\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    identity: num_G,\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DraggableItem, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c = DraggableItem;\n\nfunction DraggableItem2({\n  handle\n}) {\n  _s2();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable2 // identity={num_B}\n  , {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(DraggableItem2, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c2 = DraggableItem2;\nexport function GridGame({\n  modifiers\n}) {\n  _s3();\n\n  var test;\n  const grid = buildGrid();\n  const [parents, setParent] = useState(Array(100).fill(null)); //const [parents, setParent] = useState<UniqueIdentifier[]>(Array(100).fill(null));\n\n  const [parent2, setParent2] = useState(null);\n  const [isDragging, setIsDragging] = useState(Array(100).fill(false));\n  const [isDragging2, setIsDragging2] = useState(false);\n\n  const draggable2 = /*#__PURE__*/_jsxDEV(DraggableItem2, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 24\n  }, this);\n\n  var result = parents.find(obj => obj = test);\n  var counter = -1; // num_B++;\n  //var test2 = [{const [parent3, setParent3] = useState<UniqueIdentifier | null>(null)}];\n  //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n  //this.populateGrid();\n  //this.createGrid(); \n  //const grid = Array(10).fill(Array(10).fill(\"A\"))w\n  //const grid = Array(10).fill(\"A\")\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DndContext, {\n      modifiers: parents.every(element => element === null) ? undefined : parent2 === null ? undefined : modifiers\n      /*\n      parents.forEach((element) => {\n        element === null ? undefined:\n      }\n      ) : modifiers\n      */\n      //parents[0] === null ? undefined: parent2 === null ? undefined: modifiers\n      ,\n      onDragStart: event => {\n        let newArray = isDragging;\n        let index = Number(event.active.id);\n        newArray[index] = true;\n        setIsDragging(newArray);\n        /*\n        if (event.active.id == \"draggable-item\"+num_G) {\n          setIsDragging(true); \n        } else {\n          setIsDragging2(true);\n        } \n        */\n      },\n      onDragEnd: ({\n        over\n      }) => {\n        isDragging.forEach(element => {\n          if (element == true) {\n            let newValue = draggableCheckers.get(isDragging.indexOf(element));\n            let newArray = parents;\n            let index = Number(isDragging.indexOf(element));\n\n            if (over) {\n              newArray[index] = over.id;\n            } else {\n              newArray[index] = null;\n            }\n\n            setParent(newArray);\n          }\n        }); // setParent(prevParent => ({...prevState, email}));\n\n        /*\n        if (isDragging==true) {   \n          setParent(over ? over.id : null);\n          setIsDragging(false);\n        } else {\n          setParent2(over && isDragging2==true ? over.id : null);\n          setIsDragging2(false);\n        }\n        */\n      },\n      onDragCancel: event => {\n        let newArray = isDragging;\n        let index = Number(event.active.id);\n        newArray[index] = false;\n        setIsDragging(newArray);\n        setIsDragging2(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop\",\n        children: parent2 === null ? draggable2 : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map(row => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map(tile => {\n              counter++;\n              var rowIndex = grid.indexOf(row);\n\n              if (Number(tile) % 2 == 0 && rowIndex % 2 == 0 || Number(tile) % 2 != 0 && rowIndex % 2 != 0) {\n                const draggable = /*#__PURE__*/_jsxDEV(DraggableItem, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 43\n                }, this); //const test = draggable.type.parent;\n\n\n                if (tile < 50) {\n                  draggableCheckers.set('draggable-item' + draggableCheckers.size, draggable);\n                  var index = 0;\n                  draggableCheckers.forEach((value, key) => {\n                    if (draggable === value) {\n                      var getIndex = key.match(/\\d+$/);\n\n                      if (getIndex) {\n                        index = Number(getIndex[0]);\n                      }\n                    }\n                  });\n                }\n\n                /*#__PURE__*/\n                _jsxDEV(DragOverlay, {\n                  children: isDragging[draggableCheckers.size - 1] ? /*#__PURE__*/_jsxDEV(Draggable, {\n                    dragging: true,\n                    dragOverlay: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 67\n                  }, this) : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 25\n                }, this);\n\n                num_G++; //var result = parents.find(obj => obj = test);\n\n                draggableCheckers.get(\"\");\n                var currentDrag = parents[counter];\n                draggableCheckers.get(\"draggable-item\" + (draggableCheckers.size - 1));\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Droppable_white, {\n                    id: tile,\n                    children: [currentDrag === null && tile < 50 ? draggableCheckers.get(\"draggable-item\" + (draggableCheckers.size - 1)) : null, parent2 === null && tile > 50 ? draggable2 : null, parents.find(obj => obj === tile) ? draggableCheckers.get(parents.findIndex(i => i === tile)) : '', parent2 === tile ? draggable2 : '']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 27\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Droppable_Green, {\n                    id: tile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 30\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 27\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 7\n  }, this);\n}\n\n_s3(GridGame, \"BZIZl5AYMXZMle0JUpw8IS08aVQ=\");\n\n_c3 = GridGame;\nexport default GridGame; //<Tile />  \n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DraggableItem\");\n$RefreshReg$(_c2, \"DraggableItem2\");\n$RefreshReg$(_c3, \"GridGame\");","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx"],"names":["React","useState","DndContext","useDraggable","DragOverlay","Draggable","Droppable_Green","Droppable_white","Draggable2","num_G","draggableCheckers","Map","count","buildGrid","grid","element","y","x","String","DraggableItem","handle","isDragging","setNodeRef","listeners","id","opacity","undefined","DraggableItem2","GridGame","modifiers","test","parents","setParent","Array","fill","parent2","setParent2","setIsDragging","isDragging2","setIsDragging2","draggable2","result","find","obj","counter","every","event","newArray","index","Number","active","over","forEach","newValue","get","indexOf","map","row","tile","rowIndex","draggable","set","size","value","key","getIndex","match","currentDrag","findIndex","i"],"mappings":"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","sourcesContent":["import React, { PropsWithoutRef, useState } from 'react';\nimport \"./GridGame.css\";\nimport {\n  DndContext, \n  useDraggable, \n  DragEndEvent, \n  CollisionDetection as CollisionDetectionType, \n  Modifiers, \n  UniqueIdentifier,\n  DragOverlay,\n} from '@dnd-kit/core';\nimport {Draggable} from './Draggable';\nimport {Droppable_Green} from './Droppable_green';\nimport {Droppable_white} from './Droppable_white';\nimport {Draggable2} from './Draggable2';\nimport {} from './DraggableProperties';\ninterface Props {\n  modifiers?: Modifiers;\n  grid?: string[][];\n}\n\nvar num_G = 0;\n//var num_B = 2;\nvar draggableCheckers = new Map();\nvar count = 0;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\n\nfunction buildGrid() {\n  var grid: string[][] = [];\n  var element = 1;\n  for (let y = 1; y < 11; y++) {\n    grid[y] = [];\n    for (let x = 1; x < 11; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\n\ninterface DraggableProps {\n  handle?: boolean;\n}\n\n\n\nfunction DraggableItem({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item' + num_G,\n  });\n  \n   return (\n    <Draggable\n      identity={num_G}\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n\n    />\n  );\n}\n\n\nfunction DraggableItem2({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item',\n  });\n   return (\n    <Draggable2\n   // identity={num_B}\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n      \n    />\n  );\n}\n\nexport function GridGame({modifiers,}: Props) {\n  var test : any;\n    const grid = buildGrid();\n    const [parents, setParent] = useState<UniqueIdentifier[] | []>(Array(100).fill(null));\n    //const [parents, setParent] = useState<UniqueIdentifier[]>(Array(100).fill(null));\n    const [parent2, setParent2] = useState<UniqueIdentifier | null>(null);\n    const [isDragging, setIsDragging] = useState<boolean[]>(Array(100).fill(false));\n    const [isDragging2, setIsDragging2] = useState(false);\n    const draggable2 = <DraggableItem2 />;\n    var result = parents.find(obj => obj = test);\n    var counter = -1;\n   // num_B++;\n    //var test2 = [{const [parent3, setParent3] = useState<UniqueIdentifier | null>(null)}];\n   //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n\n    //this.populateGrid();\n    //this.createGrid(); \n   //const grid = Array(10).fill(Array(10).fill(\"A\"))w\n    //const grid = Array(10).fill(\"A\")\n    return (\n      <div>\n      <DndContext \n        modifiers = {\n          parents.every((element: String | null) => element === null) ? undefined: parent2 === null ? undefined: modifiers\n          \n          /*\n          parents.forEach((element) => {\n            element === null ? undefined:\n          }\n          ) : modifiers\n          */\n          //parents[0] === null ? undefined: parent2 === null ? undefined: modifiers\n        }\n        onDragStart={(event) => {\n          let newArray = isDragging;\n          let index = Number(event.active.id)\n          newArray[index] = true;\n          setIsDragging(newArray);\n          \n          /*\n          if (event.active.id == \"draggable-item\"+num_G) {\n            setIsDragging(true); \n          } else {\n            setIsDragging2(true);\n          } \n          */\n        }}\n        onDragEnd={({over}) => {\n          isDragging.forEach((element) => {\n            if (element == true) {\n              let newValue = draggableCheckers.get(isDragging.indexOf(element));\n              let newArray = parents;\n              let index = Number(isDragging.indexOf(element));\n              \n              if (over) {\n                newArray[index] = over.id;\n              } else {\n                newArray[index] = null as any;\n              }\n              setParent(newArray);\n            }\n          \n          });\n\n         // setParent(prevParent => ({...prevState, email}));\n          /*\n          if (isDragging==true) {   \n            setParent(over ? over.id : null);\n            setIsDragging(false);\n          } else {\n            setParent2(over && isDragging2==true ? over.id : null);\n            setIsDragging2(false);\n          }\n          */\n        }}\n        onDragCancel={(event) => {\n          let newArray = isDragging;\n          let index = Number(event.active.id)\n          newArray[index] = false;\n          setIsDragging(newArray);\n          \n          setIsDragging2(false);\n        }}\n        > \n          <div className = \"drop\">\n              {/*parents === null ? draggable : null*/}\n          </div>\n          <div className = \"drop\">  \n              {parent2 === null ? draggable2 : null}\n          </div>\n          <div className = \"grid\">\n            \n            {grid.map((row: any[]) => { \n                return (\n                  <div>\n                    {row.map((tile:any) => {\n                      counter++;\n                      var rowIndex = grid.indexOf(row);\n                      if (((Number(tile)%2 == 0 && rowIndex%2 ==0) || (Number(tile)%2 != 0 && rowIndex%2 !=0))) {\n                        const draggable = <DraggableItem/>;\n                        //const test = draggable.type.parent;\n                        if (tile < 50) {\n                          draggableCheckers.set('draggable-item'+(draggableCheckers.size), draggable);\n                          \n                          var index = 0;\n                          draggableCheckers.forEach((value: JSX.Element, key : string) =>{\n                            if (draggable === value) {\n                              var getIndex = key.match(/\\d+$/);\n                              if (getIndex) {\n                                index = Number(getIndex[0]);\n                              }\n                            }\n                          });\n                      }\n\n                        <DragOverlay>\n                          {isDragging[draggableCheckers.size-1] ? <Draggable dragging dragOverlay /> : null}\n                        </DragOverlay>\n                        num_G++;\n                        //var result = parents.find(obj => obj = test);\n                        draggableCheckers.get(\"\");\n                        var currentDrag = parents[counter];\n                        draggableCheckers.get(\"draggable-item\" + (draggableCheckers.size-1));\n                        return (    \n                          <div>\n                            <Droppable_white id={tile}>\n                              {/*parents.forEach((parent) => {\n                                {parent === null & tile < 50? draggable : null}\n                              });*/}\n                              {currentDrag === null && tile < 50? draggableCheckers.get(\"draggable-item\" + (draggableCheckers.size-1)) : null}\n                              {parent2 === null && tile > 50? draggable2 : null}\n                              {parents.find(obj => obj === tile) ? draggableCheckers.get(parents.findIndex((i) => i === tile)) : ''}\n                              {parent2 === tile ? draggable2 : ''}\n                            </Droppable_white> \n                          </div> \n                        ); \n                      } else {\n                        return (    \n                          <div>\n                             <Droppable_Green id={tile}>\n                \n                            </Droppable_Green> \n                          </div> \n                        ); \n                      }\n                     })}\n          \n                  </div>\n                );\n            })}\n            \n             {/*draggable*/}\n            {/*<DragMain/>*/}\n            </div>\n \n        \n        </DndContext> \n        </div>\n      \n    );\n}\n\n\nexport default GridGame;\n//<Tile />  "]},"metadata":{},"sourceType":"module"}