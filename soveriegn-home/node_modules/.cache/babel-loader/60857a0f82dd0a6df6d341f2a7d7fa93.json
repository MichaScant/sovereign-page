{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport { DndContext, useDraggable, DragOverlay } from '@dnd-kit/core';\nimport { Draggable } from './Draggable';\nimport { Droppable } from './Droppable';\nimport { Draggable2 } from './Draggable2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentTile = null;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\nfunction buildGrid() {\n  var grid = [];\n  var element = 0;\n\n  for (let y = 0; y < 10; y++) {\n    grid[y] = [];\n\n    for (let x = 0; x < 10; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\nfunction DraggableItem({\n  handle\n}) {\n  _s();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DraggableItem, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c = DraggableItem;\n\nfunction DraggableItem2({\n  handle\n}) {\n  _s2();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item2'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable2, {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(DraggableItem2, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c2 = DraggableItem2;\nexport function GridGame({\n  modifiers\n}) {\n  _s3();\n\n  var num = \"-1\";\n  const grid = buildGrid();\n  const [parent, setParent] = useState(null);\n  const [parent2, setParent2] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isDragging2, setIsDragging2] = useState(false);\n\n  const draggable = /*#__PURE__*/_jsxDEV(DraggableItem, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 23\n  }, this);\n\n  const draggable2 = /*#__PURE__*/_jsxDEV(DraggableItem2, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 24\n  }, this); //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n  //this.populateGrid();\n  //this.createGrid(); \n  //const grid = Array(10).fill(Array(10).fill(\"A\"))\n  //const grid = Array(10).fill(\"A\")\n\n\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    modifiers: parent === null ? undefined : parent2 === null ? undefined : modifiers,\n    onDragStart: () => {\n      setIsDragging(true);\n      setIsDragging2(true);\n    },\n    onDragEnd: ({\n      over\n    }) => {\n      setParent(over ? over.id : null);\n      setIsDragging(false);\n      setIsDragging2(false);\n      currentTile = parent;\n    },\n    onDragCancel: () => setIsDragging(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop\",\n      children: parent === null ? draggable : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop\",\n      children: parent2 === null ? draggable2 : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map(tile => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Droppable, {\n                id: tile,\n                dragging: isDragging,\n                children: [parent === tile ? draggable : '', parent === tile ? draggable2 : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: isDragging ? /*#__PURE__*/_jsxDEV(Draggable, {\n        dragging: true,\n        dragOverlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 31\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n\n_s3(GridGame, \"ThZ7f//OevCR9dNfAHbeRH7fX34=\");\n\n_c3 = GridGame;\nexport default GridGame; //<Tile />  \n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DraggableItem\");\n$RefreshReg$(_c2, \"DraggableItem2\");\n$RefreshReg$(_c3, \"GridGame\");","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx"],"names":["React","useState","DndContext","useDraggable","DragOverlay","Draggable","Droppable","Draggable2","currentTile","buildGrid","grid","element","y","x","String","DraggableItem","handle","isDragging","setNodeRef","listeners","id","opacity","undefined","DraggableItem2","GridGame","modifiers","num","parent","setParent","parent2","setParent2","setIsDragging","isDragging2","setIsDragging2","draggable","draggable2","over","map","row","tile"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport {\n  DndContext, \n  useDraggable, \n  DragEndEvent, \n  CollisionDetection as CollisionDetectionType, \n  Modifiers, \n  UniqueIdentifier,\n  DragOverlay,\n} from '@dnd-kit/core';\nimport {Draggable} from './Draggable';\nimport {Droppable} from './Droppable';\nimport {Draggable2} from './Draggable2';\n\ninterface Props {\n  modifiers?: Modifiers;\n  grid?: string[][];\n}\n\nvar currentTile = null;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\nfunction buildGrid() {\n  var grid: string[][] = [];\n  var element = 0;\n  for (let y = 0; y < 10; y++) {\n    grid[y] = [];\n    for (let x = 0; x < 10; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\n\ninterface DraggableProps {\n  handle?: boolean;\n}\n\nfunction DraggableItem({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item',\n  });\n\n   return (\n    <Draggable\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n    />\n  );\n}\n\n\nfunction DraggableItem2({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item2',\n  });\n\n   return (\n    <Draggable2\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n    />\n  );\n}\n\nexport function GridGame({modifiers,}: Props) {\n    var num = \"-1\";\n    const grid = buildGrid();\n    const [parent, setParent] = useState<UniqueIdentifier | null>(null);\n    const [parent2, setParent2] = useState<UniqueIdentifier | null>(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDragging2, setIsDragging2] = useState(false);\n    const draggable = <DraggableItem />;\n    const draggable2 = <DraggableItem2 />;\n    \n   //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n\n    //this.populateGrid();\n    //this.createGrid(); \n   //const grid = Array(10).fill(Array(10).fill(\"A\"))\n    //const grid = Array(10).fill(\"A\")\n    return (\n\n        <DndContext \n        modifiers={\n          parent === null ? undefined: parent2 === null ? undefined: modifiers\n        }\n        onDragStart={() => {setIsDragging(true); setIsDragging2(true);}}\n        onDragEnd={({over}) => {\n          setParent(over ? over.id : null);\n          setIsDragging(false);\n          setIsDragging2(false);\n          currentTile = parent;\n        }}\n        onDragCancel={() => setIsDragging(false)}\n        > \n          <div className = \"drop\">\n              {parent === null ? draggable : null}\n          </div>\n          <div className = \"drop\">\n              {parent2 === null ? draggable2 : null}\n          </div>\n          <div className = \"grid\">\n            {grid.map((row: any[]) => { \n                return (\n                  <div>\n                    {row.map((tile:any) => {\n                      return (    \n                        <div>  \n                          <Droppable id={tile} dragging = {isDragging}>\n                            {parent === tile ? draggable : ''}\n                            {parent === tile ? draggable2 : ''}\n                          </Droppable> \n                        </div> \n                      ); \n                     })}\n                  </div>\n                );\n            })}\n            \n             {/*draggable*/}\n            {/*<DragMain/>*/}\n     \n            </div>\n            <DragOverlay>\n                {isDragging ? <Draggable dragging dragOverlay /> : null}\n            </DragOverlay>\n            \n\n        </DndContext> \n      \n    );\n}\n\n\nexport default GridGame;\n//<Tile />  "]},"metadata":{},"sourceType":"module"}