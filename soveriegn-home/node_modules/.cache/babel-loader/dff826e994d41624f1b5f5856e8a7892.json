{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport { DndContext, useDraggable } from '@dnd-kit/core';\nimport { Draggable } from './Draggable';\nimport { Droppable } from './Droppable';\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\n/*\nfunction buildGrid() {\n  const grid = Array(10).fill(Array(10))\n  const [isDragging, setIsDragging] = useState(false);\n\n  let odd = false;\n  for (let y = 0; y < 10; y++) {\n    for (let x = 0; x < 10; x++) {\n      if (x % 10 !== 0) {\n        odd = !odd;\n      }\n\n      grid[y][x] = <div className = \"square_green\"/>;\n    }\n  }\n\n  return grid;\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DraggableItem({\n  handle\n}) {\n  _s();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DraggableItem, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c = DraggableItem;\nexport function GridGame() {\n  _s2();\n\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isDropped, setIsDropped] = useState(false);\n\n  const draggable = /*#__PURE__*/_jsxDEV(Draggable, {\n    id: \"draggable\",\n    children: \"drag\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 7\n  }, this); //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n  //this.populateGrid();\n  //this.createGrid(); \n  //const grid = Array(10).fill(Array(10).fill(\"A\"))\n\n\n  const grid = Array(10).fill(\"A\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop\",\n      children: parent === null ? draggable : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      onDragEnd: handleDragEnd,\n      onDragStart: () => setIsDragging(true),\n      onDragCancel: () => setIsDragging(false),\n      children: grid.map(row => {\n        return /*#__PURE__*/_jsxDEV(Droppable, {\n          id: row,\n          dragging: isDragging,\n          children: parent === row ? draggable : 'drop'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n\n  function handleDragEnd(event) {\n    setParent(event.over ? !event.over.id : true); //if (event.over && event.over.id === 'droppable') {\n    //setParent(true);\n    //}\n  }\n}\n\n_s2(GridGame, \"3vavCxHZy7QV5sSrHzr73yLI/E0=\");\n\n_c2 = GridGame;\nexport default GridGame; //<Tile />  \n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DraggableItem\");\n$RefreshReg$(_c2, \"GridGame\");","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx"],"names":["React","useState","DndContext","useDraggable","Draggable","Droppable","DraggableItem","handle","isDragging","setNodeRef","listeners","id","opacity","undefined","GridGame","parent","setParent","setIsDragging","isDropped","setIsDropped","draggable","grid","Array","fill","handleDragEnd","map","row","event","over"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport {DndContext, useDraggable, DragEndEvent, CollisionDetection as CollisionDetectionType,} from '@dnd-kit/core';\nimport {Draggable} from './Draggable';\nimport {Droppable} from './Droppable';\n\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n/*\nfunction buildGrid() {\n  const grid = Array(10).fill(Array(10))\n  const [isDragging, setIsDragging] = useState(false);\n\n  let odd = false;\n  for (let y = 0; y < 10; y++) {\n    for (let x = 0; x < 10; x++) {\n      if (x % 10 !== 0) {\n        odd = !odd;\n      }\n\n      grid[y][x] = <div className = \"square_green\"/>;\n    }\n  }\n\n  return grid;\n}\n*/\n\ninterface DraggableProps {\n  handle?: boolean;\n}\n\nfunction DraggableItem({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item',\n  });\n\n  return (\n    <Draggable\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n    />\n  );\n}\n\nexport function GridGame() {\n    \n    const [parent, setParent] = useState(false);\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDropped, setIsDropped] = useState(false);\n    const draggable = (\n      <Draggable id=\"draggable\">\n        drag\n      </Draggable>\n    );\n    \n   //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n\n    //this.populateGrid();\n    //this.createGrid(); \n   //const grid = Array(10).fill(Array(10).fill(\"A\"))\n    const grid = Array(10).fill(\"A\")\n    return (\n        <div className = \"grid\">\n          <div className = \"drop\">\n              {parent === null ? draggable : null}\n          </div>\n        <DndContext \n        onDragEnd = {handleDragEnd} \n        onDragStart={() => setIsDragging(true)}\n        onDragCancel={() => setIsDragging(false)}\n        >\n            {grid.map((row) => { \n                return (\n                  <Droppable id={row} dragging={isDragging}>\n                    {parent === row ? draggable : 'drop'}\n                  </Droppable>    \n                );\n            })}\n            \n             {/*draggable*/}\n            {/*<DragMain/>*/}\n        </DndContext> \n        </div>\n    );\n\n    function handleDragEnd(event: DragEndEvent) {\n      \n      setParent(event.over ? !event.over.id : true);\n      //if (event.over && event.over.id === 'droppable') {\n        //setParent(true);\n      //}\n    }\n}\n\n\nexport default GridGame;\n//<Tile />  "]},"metadata":{},"sourceType":"module"}