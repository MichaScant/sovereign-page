{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _inherits from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"/Users/michael/Desktop/sovereign-page/soveriegn-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toPropertyKey\";\nvar _excluded = [\"transform\"],\n    _excluded2 = [\"id\", \"autoScroll\", \"announcements\", \"children\", \"sensors\", \"collisionDetection\", \"layoutMeasuring\", \"modifiers\", \"screenReaderInstructions\"],\n    _excluded3 = [\"children\", \"transform\"];\nimport React, { createContext, useContext, useRef, useEffect, useState, useMemo, useCallback, memo, useReducer } from 'react';\nimport { createPortal } from 'react-dom';\nimport { canUseDOM, add, useUniqueId, useInterval, useLazyMemo, useIsomorphicLayoutEffect, subtract, useNodeRef, CSS } from '@dnd-kit/utilities';\nimport { useAnnouncement, HiddenText, LiveRegion } from '@dnd-kit/accessibility';\nvar screenReaderInstructions = {\n  draggable: \"\\n    To pick up a draggable item, press the space bar.\\n    While dragging, use the arrow keys to move the item.\\n    Press space again to drop the item in its new position, or press escape to cancel.\\n  \"\n};\nvar defaultAnnouncements = {\n  onDragStart: function onDragStart(id) {\n    return \"Picked up draggable item \".concat(id, \".\");\n  },\n  onDragOver: function onDragOver(id, overId) {\n    if (overId) {\n      return \"Draggable item \".concat(id, \" was moved over droppable area \").concat(overId, \".\");\n    }\n\n    return \"Draggable item \".concat(id, \" is no longer over a droppable area.\");\n  },\n  onDragEnd: function onDragEnd(id, overId) {\n    if (overId) {\n      return \"Draggable item \".concat(id, \" was dropped over droppable area \").concat(overId);\n    }\n\n    return \"Draggable item \".concat(id, \" was dropped.\");\n  },\n  onDragCancel: function onDragCancel(id) {\n    return \"Dragging was cancelled. Draggable item \".concat(id, \" was dropped.\");\n  }\n};\nvar Action;\n\n(function (Action) {\n  Action[\"DragStart\"] = \"dragStart\";\n  Action[\"DragMove\"] = \"dragMove\";\n  Action[\"DragEnd\"] = \"dragEnd\";\n  Action[\"DragCancel\"] = \"dragCancel\";\n  Action[\"DragOver\"] = \"dragOver\";\n  Action[\"RegisterDroppable\"] = \"registerDroppable\";\n  Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n  Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\n\nvar getMaxValueIndex = function getMaxValueIndex(array) {\n  return getValueIndex(array, function (value, tracked) {\n    return value > tracked;\n  });\n};\n\nvar getMinValueIndex = function getMinValueIndex(array) {\n  return getValueIndex(array, function (value, tracked) {\n    return value < tracked;\n  });\n};\n/**\r\n * Returns the index of the smallest number in an array of numbers\r\n */\n\n\nfunction getValueIndex(array, comparator) {\n  if (array.length === 0) {\n    return -1;\n  }\n\n  var tracked = array[0];\n  var index = 0;\n\n  for (var i = 1; i < array.length; i++) {\n    if (comparator(array[i], tracked)) {\n      index = i;\n      tracked = array[i];\n    }\n  }\n\n  return index;\n}\n\nfunction noop() {}\n\nfunction omit(id, elements) {\n  var _ = elements[id],\n      other = _objectWithoutProperties(elements, [id].map(_toPropertyKey));\n\n  return other;\n}\n\nvar Context = /*#__PURE__*/createContext({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: ''\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: /*#__PURE__*/new Map(),\n  droppableContainers: {},\n  over: null,\n  overlayNode: {\n    nodeRef: {\n      current: null\n    },\n    rect: null,\n    setRef: noop\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false\n});\nvar defaultCoordinates = /*#__PURE__*/Object.freeze({\n  x: 0,\n  y: 0\n});\n/**\r\n * Returns the distance between two points\r\n */\n\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction isTouchEvent(event) {\n  var _window;\n\n  return ((_window = window) == null ? void 0 : _window.TouchEvent) && event instanceof TouchEvent;\n}\n\nfunction isMouseEvent(event) {\n  var _window;\n\n  return ((_window = window) == null ? void 0 : _window.MouseEvent) && event instanceof MouseEvent || event.type.includes('mouse');\n}\n/**\r\n * Returns the normalized x and y coordinates for mouse and touch events.\r\n */\n\n\nfunction getEventCoordinates(event) {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      var _event$touches$ = event.touches[0],\n          x = _event$touches$.clientX,\n          y = _event$touches$.clientY;\n      return {\n        x: x,\n        y: y\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      var _event$changedTouches = event.changedTouches[0],\n          _x = _event$changedTouches.clientX,\n          _y = _event$changedTouches.clientY;\n      return {\n        x: _x,\n        y: _y\n      };\n    }\n  }\n\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nfunction getRelativeTransformOrigin(event, rect) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  var eventCoordinates = getEventCoordinates(event);\n  var transformOrigin = {\n    x: (eventCoordinates.x - rect.left) / rect.width * 100,\n    y: (eventCoordinates.y - rect.top) / rect.height * 100\n  };\n  return \"\".concat(transformOrigin.x, \"% \").concat(transformOrigin.y, \"%\");\n}\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */\n\n\nfunction centerOfRectangle(rect) {\n  var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rect.offsetLeft;\n  var top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : rect.offsetTop;\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5\n  };\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the center of a given\r\n * rectangle.\r\n */\n\n\nvar closestCenter = function closestCenter(rects, rect) {\n  var centerRect = centerOfRectangle(rect, rect.left, rect.top);\n  var distances = rects.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        _ = _ref3[0],\n        rect = _ref3[1];\n\n    return distanceBetween(centerOfRectangle(rect), centerRect);\n  });\n  var minValueIndex = getMinValueIndex(distances);\n  return rects[minValueIndex] ? rects[minValueIndex][0] : null;\n};\n\nfunction adjustScale(transform, rect1, rect2) {\n  return _objectSpread(_objectSpread({}, transform), {}, {\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n  });\n}\n\nfunction getRectDelta(rect1, rect2) {\n  return rect1 && rect2 ? {\n    x: rect1.left - rect2.left,\n    y: rect1.top - rect2.top\n  } : defaultCoordinates;\n}\n\nfunction createRectAdjustmentFn(modifier) {\n  return function adjustViewRect(viewRect) {\n    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      adjustments[_key - 1] = arguments[_key];\n    }\n\n    return adjustments.reduce(function (acc, adjustment) {\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n        offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n        offsetTop: acc.offsetTop + modifier * adjustment.y\n      });\n    }, _objectSpread({}, viewRect));\n  };\n}\n\nvar getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);\n\nfunction isScrollable(node) {\n  var computedStyle = window.getComputedStyle(node);\n  var overflowRegex = /(auto|scroll|overlay)/;\n  var properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.find(function (property) {\n    var value = computedStyle[property];\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  }) != null;\n}\n\nfunction getScrollableAncestors(element) {\n  var scrollParents = [];\n\n  function findScrollableAncestors(node) {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null) {\n      scrollParents.push(node.scrollingElement);\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (isScrollable(node)) {\n      scrollParents.push(node);\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element.parentNode) : scrollParents;\n}\n\nfunction getScrollableElement(element) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n\nfunction getScrollCoordinates(element) {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop\n  };\n}\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n  Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\n\nfunction getScrollPosition(scrollingContainer) {\n  var minScroll = {\n    x: 0,\n    y: 0\n  };\n  var maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight\n  };\n  var isTop = scrollingContainer.scrollTop <= minScroll.y;\n  var isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  var isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  var isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n  return {\n    isTop: isTop,\n    isLeft: isLeft,\n    isBottom: isBottom,\n    isRight: isRight,\n    maxScroll: maxScroll,\n    minScroll: minScroll\n  };\n}\n\nfunction isDocumentScrollingElement(element) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n\nvar defaultThreshold = {\n  x: 0.2,\n  y: 0.2\n};\n\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref4) {\n  var top = _ref4.top,\n      left = _ref4.left,\n      right = _ref4.right,\n      bottom = _ref4.bottom;\n  var acceleration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n  var thresholdPercentage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultThreshold;\n  var clientHeight = scrollContainer.clientHeight,\n      clientWidth = scrollContainer.clientWidth;\n  var finalScrollContainerRect = isDocumentScrollingElement(scrollContainer) ? {\n    top: 0,\n    left: 0,\n    right: clientWidth,\n    bottom: clientHeight,\n    width: clientWidth,\n    height: clientHeight\n  } : scrollContainerRect;\n\n  var _getScrollPosition = getScrollPosition(scrollContainer),\n      isTop = _getScrollPosition.isTop,\n      isBottom = _getScrollPosition.isBottom,\n      isLeft = _getScrollPosition.isLeft,\n      isRight = _getScrollPosition.isRight;\n\n  var direction = {\n    x: 0,\n    y: 0\n  };\n  var speed = {\n    x: 0,\n    y: 0\n  };\n  var threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.top + threshold.height - top) / threshold.height);\n  } else if (!isBottom && bottom >= finalScrollContainerRect.bottom - threshold.height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.right - threshold.width - right) / threshold.width);\n  } else if (!isLeft && left <= finalScrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.left + threshold.width - left) / threshold.width);\n  }\n\n  return {\n    direction: direction,\n    speed: speed\n  };\n}\n\nfunction getScrollElementRect(element) {\n  if (element === document.scrollingElement) {\n    var _window2 = window,\n        innerWidth = _window2.innerWidth,\n        innerHeight = _window2.innerHeight;\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight\n    };\n  }\n\n  var _element$getBoundingC = element.getBoundingClientRect(),\n      top = _element$getBoundingC.top,\n      left = _element$getBoundingC.left,\n      right = _element$getBoundingC.right,\n      bottom = _element$getBoundingC.bottom;\n\n  return {\n    top: top,\n    left: left,\n    right: right,\n    bottom: bottom,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\n\nfunction getScrollOffsets(scrollableAncestors) {\n  return scrollableAncestors.reduce(function (acc, node) {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nfunction getEdgeOffset(node, parent) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCoordinates;\n\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  var nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent, parent, nodeOffset);\n}\n\nfunction getElementLayout(element) {\n  var width = element.offsetWidth,\n      height = element.offsetHeight;\n\n  var _getEdgeOffset = getEdgeOffset(element, null),\n      offsetLeft = _getEdgeOffset.x,\n      offsetTop = _getEdgeOffset.y;\n\n  return {\n    width: width,\n    height: height,\n    offsetTop: offsetTop,\n    offsetLeft: offsetLeft\n  };\n}\n\nfunction getBoundingClientRect(element) {\n  if (element instanceof Window) {\n    var _width = window.innerWidth;\n    var _height = window.innerHeight;\n    return {\n      top: 0,\n      left: 0,\n      right: _width,\n      bottom: _height,\n      width: _width,\n      height: _height,\n      offsetTop: 0,\n      offsetLeft: 0\n    };\n  }\n\n  var _getElementLayout = getElementLayout(element),\n      offsetTop = _getElementLayout.offsetTop,\n      offsetLeft = _getElementLayout.offsetLeft;\n\n  var _element$getBoundingC2 = element.getBoundingClientRect(),\n      width = _element$getBoundingC2.width,\n      height = _element$getBoundingC2.height,\n      top = _element$getBoundingC2.top,\n      bottom = _element$getBoundingC2.bottom,\n      left = _element$getBoundingC2.left,\n      right = _element$getBoundingC2.right;\n\n  return {\n    width: width,\n    height: height,\n    top: top,\n    bottom: bottom,\n    right: right,\n    left: left,\n    offsetTop: offsetTop,\n    offsetLeft: offsetLeft\n  };\n}\n\nfunction getViewRect(element) {\n  var _getElementLayout2 = getElementLayout(element),\n      width = _getElementLayout2.width,\n      height = _getElementLayout2.height,\n      offsetTop = _getElementLayout2.offsetTop,\n      offsetLeft = _getElementLayout2.offsetLeft;\n\n  var scrollableAncestors = getScrollableAncestors(element);\n  var scrollOffsets = getScrollOffsets(scrollableAncestors);\n  var top = offsetTop - scrollOffsets.y;\n  var left = offsetLeft - scrollOffsets.x;\n  return {\n    width: width,\n    height: height,\n    top: top,\n    bottom: top + height,\n    right: left + width,\n    left: left,\n    offsetTop: offsetTop,\n    offsetLeft: offsetLeft\n  };\n}\n\nfunction isViewRect(entry) {\n  return 'top' in entry;\n}\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */\n\n\nfunction cornersOfRectangle(rect) {\n  var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rect.offsetLeft;\n  var top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : rect.offsetTop;\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: left + rect.width,\n    y: top\n  }, {\n    x: left,\n    y: top + rect.height\n  }, {\n    x: left + rect.width,\n    y: top + rect.height\n  }];\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the corners of\r\n * another rectangle.\r\n */\n\n\nvar closestCorners = function closestCorners(entries, target) {\n  var corners = cornersOfRectangle(target, target.left, target.top);\n  var distances = entries.map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        _ = _ref6[0],\n        entry = _ref6[1];\n\n    var entryCorners = cornersOfRectangle(entry, isViewRect(entry) ? entry.left : undefined, isViewRect(entry) ? entry.top : undefined);\n    var distances = corners.reduce(function (accumulator, corner, index) {\n      return accumulator + distanceBetween(entryCorners[index], corner);\n    }, 0);\n    return Number((distances / 4).toFixed(4));\n  });\n  var minValueIndex = getMinValueIndex(distances);\n  return entries[minValueIndex] ? entries[minValueIndex][0] : null;\n};\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */\n\n\nfunction getIntersectionRatio(entry, target) {\n  var top = Math.max(target.top, entry.offsetTop);\n  var left = Math.max(target.left, entry.offsetLeft);\n  var right = Math.min(target.left + target.width, entry.offsetLeft + entry.width);\n  var bottom = Math.min(target.top + target.height, entry.offsetTop + entry.height);\n  var width = right - left;\n  var height = bottom - top;\n\n  if (left < right && top < bottom) {\n    var targetArea = target.width * target.height;\n    var entryArea = entry.width * entry.height;\n    var intersectionArea = width * height;\n    var intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n\n\n  return 0;\n}\n/**\r\n * Returns the rectangle that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */\n\n\nvar rectIntersection = function rectIntersection(entries, target) {\n  var intersections = entries.map(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        _ = _ref8[0],\n        entry = _ref8[1];\n\n    return getIntersectionRatio(entry, target);\n  });\n  var maxValueIndex = getMaxValueIndex(intersections);\n\n  if (intersections[maxValueIndex] <= 0) {\n    return null;\n  }\n\n  return entries[maxValueIndex] ? entries[maxValueIndex][0] : null;\n};\n\nfunction getOwnerDocument(target) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n\nfunction getWindow(target) {\n  var _getOwnerDocument$def;\n\n  return (_getOwnerDocument$def = getOwnerDocument(target).defaultView) != null ? _getOwnerDocument$def : window;\n}\n\nfunction getInitialState() {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {\n        x: 0,\n        y: 0\n      },\n      nodes: {},\n      translate: {\n        x: 0,\n        y: 0\n      }\n    },\n    droppable: {\n      containers: {}\n    }\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Action.DragStart:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draggable: _objectSpread(_objectSpread({}, state.draggable), {}, {\n          initialCoordinates: action.initialCoordinates,\n          active: action.active\n        })\n      });\n\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draggable: _objectSpread(_objectSpread({}, state.draggable), {}, {\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y\n          }\n        })\n      });\n\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draggable: _objectSpread(_objectSpread({}, state.draggable), {}, {\n          active: null,\n          initialCoordinates: {\n            x: 0,\n            y: 0\n          },\n          translate: {\n            x: 0,\n            y: 0\n          }\n        })\n      });\n\n    case Action.RegisterDroppable:\n      {\n        var element = action.element;\n        var id = element.id;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          droppable: _objectSpread(_objectSpread({}, state.droppable), {}, {\n            containers: _objectSpread(_objectSpread({}, state.droppable.containers), {}, _defineProperty({}, id, element))\n          })\n        });\n      }\n\n    case Action.SetDroppableDisabled:\n      {\n        var _id = action.id,\n            disabled = action.disabled;\n        var _element = state.droppable.containers[_id];\n\n        if (!_element) {\n          return state;\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          droppable: _objectSpread(_objectSpread({}, state.droppable), {}, {\n            containers: _objectSpread(_objectSpread({}, state.droppable.containers), {}, _defineProperty({}, _id, _objectSpread(_objectSpread({}, _element), {}, {\n              disabled: disabled\n            })))\n          })\n        });\n      }\n\n    case Action.UnregisterDroppable:\n      {\n        var _id2 = action.id;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          droppable: _objectSpread(_objectSpread({}, state.droppable), {}, {\n            containers: omit(_id2, state.droppable.containers)\n          })\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nvar DndMonitorContext = /*#__PURE__*/createContext({\n  type: null,\n  event: null\n});\n\nfunction useDndMonitor(_ref9) {\n  var onDragStart = _ref9.onDragStart,\n      onDragMove = _ref9.onDragMove,\n      onDragOver = _ref9.onDragOver,\n      onDragEnd = _ref9.onDragEnd,\n      onDragCancel = _ref9.onDragCancel;\n  var monitorState = useContext(DndMonitorContext);\n  var previousMonitorState = useRef(monitorState);\n  useEffect(function () {\n    if (monitorState !== previousMonitorState.current) {\n      var type = monitorState.type,\n          event = monitorState.event;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart == null ? void 0 : onDragStart(event);\n          break;\n\n        case Action.DragMove:\n          onDragMove == null ? void 0 : onDragMove(event);\n          break;\n\n        case Action.DragOver:\n          onDragOver == null ? void 0 : onDragOver(event);\n          break;\n\n        case Action.DragCancel:\n          onDragCancel == null ? void 0 : onDragCancel(event);\n          break;\n\n        case Action.DragEnd:\n          onDragEnd == null ? void 0 : onDragEnd(event);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [monitorState, onDragStart, onDragMove, onDragOver, onDragEnd, onDragCancel]);\n}\n\nfunction Accessibility(_ref10) {\n  var _ref10$announcements = _ref10.announcements,\n      announcements = _ref10$announcements === void 0 ? defaultAnnouncements : _ref10$announcements,\n      hiddenTextDescribedById = _ref10.hiddenTextDescribedById,\n      screenReaderInstructions = _ref10.screenReaderInstructions;\n\n  var _useAnnouncement = useAnnouncement(),\n      announce = _useAnnouncement.announce,\n      announcement = _useAnnouncement.announcement;\n\n  var liveRegionId = useUniqueId(\"DndLiveRegion\");\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      mounted = _useState2[0],\n      setMounted = _useState2[1];\n\n  useEffect(function () {\n    setMounted(true);\n  }, []);\n  useDndMonitor(useMemo(function () {\n    return {\n      onDragStart: function onDragStart(_ref11) {\n        var active = _ref11.active;\n        announce(announcements.onDragStart(active.id));\n      },\n      onDragMove: function onDragMove(_ref12) {\n        var active = _ref12.active,\n            over = _ref12.over;\n\n        if (announcements.onDragMove) {\n          announce(announcements.onDragMove(active.id, over == null ? void 0 : over.id));\n        }\n      },\n      onDragOver: function onDragOver(_ref13) {\n        var active = _ref13.active,\n            over = _ref13.over;\n        announce(announcements.onDragOver(active.id, over == null ? void 0 : over.id));\n      },\n      onDragEnd: function onDragEnd(_ref14) {\n        var active = _ref14.active,\n            over = _ref14.over;\n        announce(announcements.onDragEnd(active.id, over == null ? void 0 : over.id));\n      },\n      onDragCancel: function onDragCancel(_ref15) {\n        var active = _ref15.active;\n        announce(announcements.onDragCancel(active.id));\n      }\n    };\n  }, [announce, announcements]));\n  return mounted ? createPortal(React.createElement(React.Fragment, null, React.createElement(HiddenText, {\n    id: hiddenTextDescribedById,\n    value: screenReaderInstructions.draggable\n  }), React.createElement(LiveRegion, {\n    id: liveRegionId,\n    announcement: announcement\n  })), document.body) : null;\n}\n\nvar AutoScrollActivator;\n\n(function (AutoScrollActivator) {\n  AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n  AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\n\nvar TraversalOrder;\n\n(function (TraversalOrder) {\n  TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n  TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\n\nfunction useAutoScroller(_ref16) {\n  var acceleration = _ref16.acceleration,\n      _ref16$activator = _ref16.activator,\n      activator = _ref16$activator === void 0 ? AutoScrollActivator.Pointer : _ref16$activator,\n      canScroll = _ref16.canScroll,\n      draggingRect = _ref16.draggingRect,\n      enabled = _ref16.enabled,\n      _ref16$interval = _ref16.interval,\n      interval = _ref16$interval === void 0 ? 5 : _ref16$interval,\n      _ref16$order = _ref16.order,\n      order = _ref16$order === void 0 ? TraversalOrder.TreeOrder : _ref16$order,\n      pointerCoordinates = _ref16.pointerCoordinates,\n      scrollableAncestors = _ref16.scrollableAncestors,\n      scrollableAncestorRects = _ref16.scrollableAncestorRects,\n      threshold = _ref16.threshold;\n\n  var _useInterval = useInterval(),\n      _useInterval2 = _slicedToArray(_useInterval, 2),\n      setAutoScrollInterval = _useInterval2[0],\n      clearAutoScrollInterval = _useInterval2[1];\n\n  var scrollSpeed = useRef({\n    x: 1,\n    y: 1\n  });\n  var rect = useMemo(function () {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates ? {\n          top: pointerCoordinates.y,\n          bottom: pointerCoordinates.y,\n          left: pointerCoordinates.x,\n          right: pointerCoordinates.x\n        } : null;\n\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  var scrollDirection = useRef(defaultCoordinates);\n  var scrollContainerRef = useRef(null);\n  var autoScroll = useCallback(function () {\n    var scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    var scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    var scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  var sortedScrollableAncestors = useMemo(function () {\n    return order === TraversalOrder.TreeOrder ? _toConsumableArray(scrollableAncestors).reverse() : scrollableAncestors;\n  }, [order, scrollableAncestors]);\n  useEffect(function () {\n    if (!enabled || !scrollableAncestors.length || !rect) {\n      clearAutoScrollInterval();\n      return;\n    }\n\n    var _iterator = _createForOfIteratorHelper(sortedScrollableAncestors),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var scrollContainer = _step.value;\n\n        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n          continue;\n        }\n\n        var index = scrollableAncestors.indexOf(scrollContainer);\n        var scrolllContainerRect = scrollableAncestorRects[index];\n\n        if (!scrolllContainerRect) {\n          continue;\n        }\n\n        var _getScrollDirectionAn = getScrollDirectionAndSpeed(scrollContainer, scrolllContainerRect, rect, acceleration, threshold),\n            direction = _getScrollDirectionAn.direction,\n            speed = _getScrollDirectionAn.speed;\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    scrollSpeed.current = {\n      x: 0,\n      y: 0\n    };\n    scrollDirection.current = {\n      x: 0,\n      y: 0\n    };\n    clearAutoScrollInterval();\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(rect), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(threshold)]);\n}\n\nfunction useCachedNode(draggableNodes, id) {\n  var draggableNode = id !== null ? draggableNodes[id] : undefined;\n  var node = draggableNode ? draggableNode.node.current : null;\n  return useLazyMemo(function (cachedNode) {\n    var _ref;\n\n    if (id === null) {\n      return null;\n    } // In some cases, the draggable node can unmount while dragging\n    // This is the case for virtualized lists. In those situations,\n    // we fall back to the last known value for that node.\n\n\n    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n  }, [node, id]);\n}\n\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n  return useMemo(function () {\n    return sensors.reduce(function (accumulator, sensor) {\n      var Sensor = sensor.sensor;\n      var sensorActivators = Sensor.activators.map(function (activator) {\n        return {\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor)\n        };\n      });\n      return [].concat(_toConsumableArray(accumulator), _toConsumableArray(sensorActivators));\n    }, []);\n  }, [sensors, getSyntheticHandler]);\n}\n\nfunction useData(data) {\n  var dataRef = useRef(data);\n  useIsomorphicLayoutEffect(function () {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n  return dataRef;\n}\n\nvar LayoutMeasuringStrategy;\n\n(function (LayoutMeasuringStrategy) {\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"Always\"] = 0] = \"Always\";\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(LayoutMeasuringStrategy || (LayoutMeasuringStrategy = {}));\n\nvar LayoutMeasuringFrequency;\n\n(function (LayoutMeasuringFrequency) {\n  LayoutMeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(LayoutMeasuringFrequency || (LayoutMeasuringFrequency = {}));\n\nvar defaultValue = /*#__PURE__*/new Map();\n\nfunction useLayoutMeasuring(containers, _ref17) {\n  var dragging = _ref17.dragging,\n      dependencies = _ref17.dependencies,\n      config = _ref17.config;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      willRecomputeLayouts = _useState4[0],\n      setWillRecomputeLayouts = _useState4[1];\n\n  var _getLayoutMeasuring = getLayoutMeasuring(config),\n      frequency = _getLayoutMeasuring.frequency,\n      strategy = _getLayoutMeasuring.strategy;\n\n  var containersRef = useRef(containers);\n  var recomputeLayouts = useCallback(function () {\n    return setWillRecomputeLayouts(true);\n  }, []);\n  var recomputeLayoutsTimeoutId = useRef(null);\n  var disabled = isDisabled();\n  var layoutRectMap = useLazyMemo(function (previousValue) {\n    if (disabled && !dragging) {\n      return defaultValue;\n    }\n\n    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || willRecomputeLayouts) {\n      for (var _i = 0, _Object$values = Object.values(containers); _i < _Object$values.length; _i++) {\n        var container = _Object$values[_i];\n\n        if (!container) {\n          continue;\n        }\n\n        container.rect.current = container.node.current ? getElementLayout(container.node.current) : null;\n      }\n\n      return createLayoutRectMap(containers);\n    }\n\n    return previousValue;\n  }, [containers, dragging, disabled, willRecomputeLayouts]);\n  useEffect(function () {\n    containersRef.current = containers;\n  }, [containers]);\n  useEffect(function () {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n  useEffect(function recompute() {\n    if (disabled) {\n      return;\n    }\n\n    requestAnimationFrame(recomputeLayouts);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dragging, disabled]);\n  useEffect(function forceRecomputeLayouts() {\n    if (disabled || typeof frequency !== 'number' || recomputeLayoutsTimeoutId.current !== null) {\n      return;\n    }\n\n    recomputeLayoutsTimeoutId.current = setTimeout(function () {\n      recomputeLayouts();\n      recomputeLayoutsTimeoutId.current = null;\n    }, frequency);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [frequency, disabled, recomputeLayouts].concat(_toConsumableArray(dependencies)));\n  return {\n    layoutRectMap: layoutRectMap,\n    recomputeLayouts: recomputeLayouts,\n    willRecomputeLayouts: willRecomputeLayouts\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case LayoutMeasuringStrategy.Always:\n        return false;\n\n      case LayoutMeasuringStrategy.BeforeDragging:\n        return dragging;\n\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction createLayoutRectMap(containers) {\n  var layoutRectMap = new Map();\n\n  if (containers) {\n    for (var _i2 = 0, _Object$values2 = Object.values(containers); _i2 < _Object$values2.length; _i2++) {\n      var container = _Object$values2[_i2];\n\n      if (!container) {\n        continue;\n      }\n\n      var id = container.id,\n          rect = container.rect,\n          disabled = container.disabled;\n\n      if (disabled || rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n\nvar defaultLayoutMeasuring = {\n  strategy: LayoutMeasuringStrategy.WhileDragging,\n  frequency: LayoutMeasuringFrequency.Optimized\n};\n\nfunction getLayoutMeasuring(layoutMeasuring) {\n  return layoutMeasuring ? _objectSpread(_objectSpread({}, defaultLayoutMeasuring), layoutMeasuring) : defaultLayoutMeasuring;\n}\n\nfunction useScrollOffsets(elements) {\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scrollCoordinates = _useState6[0],\n      setScrollCoordinates = _useState6[1];\n\n  var prevElements = useRef(elements); // To-do: Throttle the handleScroll callback\n\n  var handleScroll = useCallback(function (event) {\n    var scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates(function (scrollCoordinates) {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n  useEffect(function () {\n    var previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n      var entries = elements.map(function (element) {\n        var scrollableElement = getScrollableElement(element);\n\n        if (scrollableElement) {\n          scrollableElement.addEventListener('scroll', handleScroll, {\n            passive: true\n          });\n          return [scrollableElement, getScrollCoordinates(scrollableElement)];\n        }\n\n        return null;\n      }).filter(function (entry) {\n        return entry != null;\n      });\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n      prevElements.current = elements;\n    }\n\n    return function () {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements) {\n      elements.forEach(function (element) {\n        var scrollableElement = getScrollableElement(element);\n        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n  return useMemo(function () {\n    if (elements.length) {\n      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce(function (acc, coordinates) {\n        return add(acc, coordinates);\n      }, defaultCoordinates) : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n\nvar defaultValue$1 = [];\n\nfunction useScrollableAncestors(node) {\n  var previousNode = useRef(node);\n  var ancestors = useLazyMemo(function (previousValue) {\n    if (!node) {\n      return defaultValue$1;\n    }\n\n    if (previousValue && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n      return previousValue;\n    }\n\n    return getScrollableAncestors(node);\n  }, [node]);\n  useEffect(function () {\n    previousNode.current = node;\n  }, [node]);\n  return ancestors;\n}\n\nfunction useSyntheticListeners(listeners, id) {\n  return useMemo(function () {\n    return listeners.reduce(function (acc, _ref18) {\n      var eventName = _ref18.eventName,\n          handler = _ref18.handler;\n\n      acc[eventName] = function (event) {\n        handler(event, id);\n      };\n\n      return acc;\n    }, {});\n  }, [listeners, id]);\n}\n\nvar useClientRect = /*#__PURE__*/createUseRectFn(getBoundingClientRect);\nvar useClientRects = /*#__PURE__*/createUseRectsFn(getBoundingClientRect);\nvar useViewRect = /*#__PURE__*/createUseRectFn(getViewRect);\n\nfunction createUseRectFn(getRect) {\n  return function useClientRect(element, forceRecompute) {\n    var previousElement = useRef(element);\n    return useLazyMemo(function (previousValue) {\n      if (!element) {\n        return null;\n      }\n\n      if (forceRecompute || !previousValue && element || element !== previousElement.current) {\n        if (element instanceof HTMLElement && element.parentNode == null) {\n          return null;\n        }\n\n        return getRect(element);\n      }\n\n      return previousValue != null ? previousValue : null;\n    }, [element, forceRecompute]);\n  };\n}\n\nfunction createUseRectsFn(getRect) {\n  var defaultValue = [];\n  return function useRects(elements, forceRecompute) {\n    var previousElements = useRef(elements);\n    return useLazyMemo(function (previousValue) {\n      if (!elements.length) {\n        return defaultValue;\n      }\n\n      if (forceRecompute || !previousValue && elements.length || elements !== previousElements.current) {\n        return elements.map(function (element) {\n          return getRect(element);\n        });\n      }\n\n      return previousValue != null ? previousValue : defaultValue;\n    }, [elements, forceRecompute]);\n  };\n}\n\nfunction useSensor(sensor, options) {\n  return useMemo(function () {\n    return {\n      sensor: sensor,\n      options: options != null ? options : {}\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [sensor, options]);\n}\n\nfunction useSensors() {\n  for (var _len2 = arguments.length, sensors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    sensors[_key2] = arguments[_key2];\n  }\n\n  return useMemo(function () {\n    return [].concat(sensors).filter(function (sensor) {\n      return sensor != null;\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [].concat(sensors));\n}\n\nvar Listeners = /*#__PURE__*/function () {\n  function Listeners(target) {\n    _classCallCheck(this, Listeners);\n\n    this.target = target;\n    this.listeners = [];\n  }\n\n  _createClass(Listeners, [{\n    key: \"add\",\n    value: function add(eventName, handler, options) {\n      this.target.addEventListener(eventName, handler, options);\n      this.listeners.push({\n        eventName: eventName,\n        handler: handler\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this = this;\n\n      this.listeners.forEach(function (_ref19) {\n        var eventName = _ref19.eventName,\n            handler = _ref19.handler;\n        return _this.target.removeEventListener(eventName, handler);\n      });\n    }\n  }]);\n\n  return Listeners;\n}();\n\nfunction getEventListenerTarget(element) {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  return element instanceof EventTarget ? element : getOwnerDocument(element);\n}\n\nfunction hasExceededDistance(delta, measurement) {\n  var dx = Math.abs(delta.x);\n  var dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n\nvar KeyboardCode;\n\n(function (KeyboardCode) {\n  KeyboardCode[\"Space\"] = \"Space\";\n  KeyboardCode[\"Down\"] = \"ArrowDown\";\n  KeyboardCode[\"Right\"] = \"ArrowRight\";\n  KeyboardCode[\"Left\"] = \"ArrowLeft\";\n  KeyboardCode[\"Up\"] = \"ArrowUp\";\n  KeyboardCode[\"Esc\"] = \"Escape\";\n  KeyboardCode[\"Enter\"] = \"Enter\";\n})(KeyboardCode || (KeyboardCode = {}));\n\nvar defaultKeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter]\n};\n\nvar defaultKeyboardCoordinateGetter = function defaultKeyboardCoordinateGetter(event, _ref20) {\n  var currentCoordinates = _ref20.currentCoordinates;\n\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return _objectSpread(_objectSpread({}, currentCoordinates), {}, {\n        x: currentCoordinates.x + 25\n      });\n\n    case KeyboardCode.Left:\n      return _objectSpread(_objectSpread({}, currentCoordinates), {}, {\n        x: currentCoordinates.x - 25\n      });\n\n    case KeyboardCode.Down:\n      return _objectSpread(_objectSpread({}, currentCoordinates), {}, {\n        y: currentCoordinates.y + 25\n      });\n\n    case KeyboardCode.Up:\n      return _objectSpread(_objectSpread({}, currentCoordinates), {}, {\n        y: currentCoordinates.y - 25\n      });\n  }\n\n  return undefined;\n};\n\nvar KeyboardSensor = /*#__PURE__*/function () {\n  function KeyboardSensor(props) {\n    _classCallCheck(this, KeyboardSensor);\n\n    this.props = props;\n    this.autoScrollEnabled = false;\n    this.coordinates = defaultCoordinates;\n    var target = props.event.target;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n\n  _createClass(KeyboardSensor, [{\n    key: \"attach\",\n    value: function attach() {\n      var _this2 = this;\n\n      this.handleStart();\n      setTimeout(function () {\n        _this2.listeners.add('keydown', _this2.handleKeyDown);\n\n        _this2.windowListeners.add('resize', _this2.handleCancel);\n      });\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this$props = this.props,\n          activeNode = _this$props.activeNode,\n          onStart = _this$props.onStart;\n\n      if (!activeNode.node.current) {\n        throw new Error('Active draggable node is undefined');\n      }\n\n      var activeNodeRect = getBoundingClientRect(activeNode.node.current);\n      var coordinates = {\n        x: activeNodeRect.left,\n        y: activeNodeRect.top\n      };\n      this.coordinates = coordinates;\n      onStart(coordinates);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      if (event instanceof KeyboardEvent) {\n        var coordinates = this.coordinates;\n        var _this$props2 = this.props,\n            active = _this$props2.active,\n            context = _this$props2.context,\n            options = _this$props2.options;\n        var _options$keyboardCode = options.keyboardCodes,\n            keyboardCodes = _options$keyboardCode === void 0 ? defaultKeyboardCodes : _options$keyboardCode,\n            _options$coordinateGe = options.coordinateGetter,\n            coordinateGetter = _options$coordinateGe === void 0 ? defaultKeyboardCoordinateGetter : _options$coordinateGe,\n            _options$scrollBehavi = options.scrollBehavior,\n            scrollBehavior = _options$scrollBehavi === void 0 ? 'smooth' : _options$scrollBehavi;\n        var code = event.code;\n\n        if (keyboardCodes.end.includes(code)) {\n          this.handleEnd(event);\n          return;\n        }\n\n        if (keyboardCodes.cancel.includes(code)) {\n          this.handleCancel(event);\n          return;\n        }\n\n        var newCoordinates = coordinateGetter(event, {\n          active: active,\n          context: context.current,\n          currentCoordinates: coordinates\n        });\n\n        if (newCoordinates) {\n          var scrollDelta = {\n            x: 0,\n            y: 0\n          };\n          var scrollableAncestors = context.current.scrollableAncestors;\n\n          var _iterator2 = _createForOfIteratorHelper(scrollableAncestors),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var scrollContainer = _step2.value;\n              var direction = event.code;\n              var coordinatesDelta = subtract(newCoordinates, coordinates);\n\n              var _getScrollPosition2 = getScrollPosition(scrollContainer),\n                  isTop = _getScrollPosition2.isTop,\n                  isRight = _getScrollPosition2.isRight,\n                  isLeft = _getScrollPosition2.isLeft,\n                  isBottom = _getScrollPosition2.isBottom,\n                  maxScroll = _getScrollPosition2.maxScroll,\n                  minScroll = _getScrollPosition2.minScroll;\n\n              var scrollElementRect = getScrollElementRect(scrollContainer);\n              var clampedCoordinates = {\n                x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n                y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n              };\n              var canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n              var canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n\n              if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n                var canFullyScrollToNewCoordinates = direction === KeyboardCode.Right && scrollContainer.scrollLeft + coordinatesDelta.x <= maxScroll.x || direction === KeyboardCode.Left && scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x;\n\n                if (canFullyScrollToNewCoordinates) {\n                  // We don't need to update coordinates, the scroll adjustment alone will trigger\n                  // logic to auto-detect the new container we are over\n                  scrollContainer.scrollBy({\n                    left: coordinatesDelta.x,\n                    behavior: scrollBehavior\n                  });\n                  return;\n                }\n\n                scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n                scrollContainer.scrollBy({\n                  left: -scrollDelta.x,\n                  behavior: scrollBehavior\n                });\n                break;\n              } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n                var _canFullyScrollToNewCoordinates = direction === KeyboardCode.Down && scrollContainer.scrollTop + coordinatesDelta.y <= maxScroll.y || direction === KeyboardCode.Up && scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y;\n\n                if (_canFullyScrollToNewCoordinates) {\n                  // We don't need to update coordinates, the scroll adjustment alone will trigger\n                  // logic to auto-detect the new container we are over\n                  scrollContainer.scrollBy({\n                    top: coordinatesDelta.y,\n                    behavior: scrollBehavior\n                  });\n                  return;\n                }\n\n                scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n                scrollContainer.scrollBy({\n                  top: -scrollDelta.y,\n                  behavior: scrollBehavior\n                });\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          this.handleMove(event, add(newCoordinates, scrollDelta));\n        }\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(event, coordinates) {\n      var onMove = this.props.onMove;\n      event.preventDefault();\n      onMove(coordinates);\n      this.coordinates = coordinates;\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd(event) {\n      var onEnd = this.props.onEnd;\n      event.preventDefault();\n      this.detach();\n      onEnd();\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel(event) {\n      var onCancel = this.props.onCancel;\n      event.preventDefault();\n      this.detach();\n      onCancel();\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.listeners.removeAll();\n      this.windowListeners.removeAll();\n    }\n  }]);\n\n  return KeyboardSensor;\n}();\n\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: function handler(event, _ref21) {\n    var _ref21$keyboardCodes = _ref21.keyboardCodes,\n        keyboardCodes = _ref21$keyboardCodes === void 0 ? defaultKeyboardCodes : _ref21$keyboardCodes,\n        onActivation = _ref21.onActivation;\n    var code = event.nativeEvent.code;\n\n    if (keyboardCodes.start.includes(code)) {\n      event.preventDefault();\n      onActivation == null ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n\n    return false;\n  }\n}];\n\nfunction isDistanceConstraint(constraint) {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(constraint) {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"Keydown\"] = \"keydown\";\n})(EventName || (EventName = {}));\n\nvar AbstractPointerSensor = /*#__PURE__*/function () {\n  function AbstractPointerSensor(props, events) {\n    var listenerTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getEventListenerTarget(props.event.target);\n\n    _classCallCheck(this, AbstractPointerSensor);\n\n    this.props = props;\n    this.events = events;\n    this.autoScrollEnabled = true;\n    this.activated = false;\n    this.timeoutId = null;\n    var event = props.event;\n    this.props = props;\n    this.events = events;\n    this.ownerDocument = getOwnerDocument(event.target);\n    this.listeners = new Listeners(listenerTarget);\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.attach();\n  }\n\n  _createClass(AbstractPointerSensor, [{\n    key: \"attach\",\n    value: function attach() {\n      var events = this.events,\n          activationConstraint = this.props.options.activationConstraint;\n      this.listeners.add(events.move.name, this.handleMove, false);\n      this.listeners.add(events.end.name, this.handleEnd);\n      this.ownerDocument.addEventListener(EventName.Keydown, this.handleKeydown);\n\n      if (activationConstraint) {\n        if (isDistanceConstraint(activationConstraint)) {\n          return;\n        }\n\n        if (isDelayConstraint(activationConstraint)) {\n          this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n          return;\n        }\n      }\n\n      this.handleStart();\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.listeners.removeAll();\n      this.ownerDocument.removeEventListener(EventName.Keydown, this.handleKeydown);\n\n      if (this.timeoutId !== null) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var initialCoordinates = this.initialCoordinates;\n      var onStart = this.props.onStart;\n\n      if (initialCoordinates) {\n        this.activated = true;\n        onStart(initialCoordinates);\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(event) {\n      var activated = this.activated,\n          initialCoordinates = this.initialCoordinates,\n          props = this.props;\n      var onMove = props.onMove,\n          activationConstraint = props.options.activationConstraint;\n\n      if (!initialCoordinates) {\n        return;\n      }\n\n      var coordinates = getEventCoordinates(event);\n      var delta = subtract(initialCoordinates, coordinates);\n\n      if (!activated && activationConstraint) {\n        // Constraint validation\n        if (isDelayConstraint(activationConstraint)) {\n          if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n            return this.handleCancel();\n          }\n\n          return;\n        }\n\n        if (isDistanceConstraint(activationConstraint)) {\n          if (hasExceededDistance(delta, activationConstraint.distance)) {\n            return this.handleStart();\n          }\n\n          return;\n        }\n      }\n\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      onMove(coordinates);\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd() {\n      var onEnd = this.props.onEnd;\n      this.detach();\n      onEnd();\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel() {\n      var onCancel = this.props.onCancel;\n      this.detach();\n      onCancel();\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      if (event.code === KeyboardCode.Esc) {\n        this.handleCancel();\n      }\n    }\n  }]);\n\n  return AbstractPointerSensor;\n}();\n\nvar events = {\n  move: {\n    name: 'pointermove'\n  },\n  end: {\n    name: 'pointerup'\n  }\n};\n\nvar PointerSensor = /*#__PURE__*/function (_AbstractPointerSenso) {\n  _inherits(PointerSensor, _AbstractPointerSenso);\n\n  var _super = _createSuper(PointerSensor);\n\n  function PointerSensor(props) {\n    _classCallCheck(this, PointerSensor);\n\n    var event = props.event; // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n\n    var listenerTarget = getOwnerDocument(event.target);\n    return _super.call(this, props, events, listenerTarget);\n  }\n\n  return PointerSensor;\n}(AbstractPointerSensor);\n\nPointerSensor.activators = [{\n  eventName: 'onPointerDown',\n  handler: function handler(_ref22, _ref23) {\n    var event = _ref22.nativeEvent;\n    var onActivation = _ref23.onActivation;\n\n    if (!event.isPrimary || event.button !== 0) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\nvar events$1 = {\n  move: {\n    name: 'mousemove'\n  },\n  end: {\n    name: 'mouseup'\n  }\n};\nvar MouseButton;\n\n(function (MouseButton) {\n  MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\n\nvar MouseSensor = /*#__PURE__*/function (_AbstractPointerSenso2) {\n  _inherits(MouseSensor, _AbstractPointerSenso2);\n\n  var _super2 = _createSuper(MouseSensor);\n\n  function MouseSensor(props) {\n    _classCallCheck(this, MouseSensor);\n\n    return _super2.call(this, props, events$1, getOwnerDocument(props.event.target));\n  }\n\n  return MouseSensor;\n}(AbstractPointerSensor);\n\nMouseSensor.activators = [{\n  eventName: 'onMouseDown',\n  handler: function handler(_ref24, _ref25) {\n    var event = _ref24.nativeEvent;\n    var onActivation = _ref25.onActivation;\n\n    if (event.button === MouseButton.RightClick) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\nvar events$2 = {\n  move: {\n    name: 'touchmove'\n  },\n  end: {\n    name: 'touchend'\n  }\n};\n\nvar TouchSensor = /*#__PURE__*/function (_AbstractPointerSenso3) {\n  _inherits(TouchSensor, _AbstractPointerSenso3);\n\n  var _super3 = _createSuper(TouchSensor);\n\n  function TouchSensor(props) {\n    _classCallCheck(this, TouchSensor);\n\n    return _super3.call(this, props, events$2);\n  }\n\n  return TouchSensor;\n}(AbstractPointerSensor);\n\nTouchSensor.activators = [{\n  eventName: 'onTouchStart',\n  handler: function handler(_ref26, _ref27) {\n    var event = _ref26.nativeEvent;\n    var onActivation = _ref27.onActivation;\n    var touches = event.touches;\n\n    if (touches.length > 1) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\n\nfunction applyModifiers(modifiers, _ref28) {\n  var transform = _ref28.transform,\n      args = _objectWithoutProperties(_ref28, _excluded);\n\n  return (modifiers == null ? void 0 : modifiers.length) ? modifiers.reduce(function (accumulator, modifier) {\n    return modifier(_objectSpread({\n      transform: accumulator\n    }, args));\n  }, transform) : transform;\n}\n\nvar defaultSensors = [{\n  sensor: PointerSensor,\n  options: {}\n}, {\n  sensor: KeyboardSensor,\n  options: {}\n}];\nvar defaultData = {\n  current: {}\n};\nvar ActiveDraggableContext = /*#__PURE__*/createContext(_objectSpread(_objectSpread({}, defaultCoordinates), {}, {\n  scaleX: 1,\n  scaleY: 1\n}));\nvar DndContext = /*#__PURE__*/memo(function DndContext(_ref29) {\n  var id = _ref29.id,\n      _ref29$autoScroll = _ref29.autoScroll,\n      autoScroll = _ref29$autoScroll === void 0 ? true : _ref29$autoScroll,\n      announcements = _ref29.announcements,\n      children = _ref29.children,\n      _ref29$sensors = _ref29.sensors,\n      sensors = _ref29$sensors === void 0 ? defaultSensors : _ref29$sensors,\n      _ref29$collisionDetec = _ref29.collisionDetection,\n      collisionDetection = _ref29$collisionDetec === void 0 ? rectIntersection : _ref29$collisionDetec,\n      layoutMeasuring = _ref29.layoutMeasuring,\n      modifiers = _ref29.modifiers,\n      _ref29$screenReaderIn = _ref29.screenReaderInstructions,\n      screenReaderInstructions$1 = _ref29$screenReaderIn === void 0 ? screenReaderInstructions : _ref29$screenReaderIn,\n      props = _objectWithoutProperties(_ref29, _excluded2);\n\n  var _sensorContext$curren, _sensorContext$curren2, _overContainer$rect$c;\n\n  var store = useReducer(reducer, undefined, getInitialState);\n\n  var _store = _slicedToArray(store, 2),\n      state = _store[0],\n      dispatch = _store[1];\n\n  var _useState7 = useState(function () {\n    return {\n      type: null,\n      event: null\n    };\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      monitorState = _useState8[0],\n      setMonitorState = _useState8[1];\n\n  var _state$draggable = state.draggable,\n      activeId = _state$draggable.active,\n      draggableNodes = _state$draggable.nodes,\n      translate = _state$draggable.translate,\n      droppableContainers = state.droppable.containers;\n  var node = activeId ? draggableNodes[activeId] : null;\n  var activeRects = useRef({\n    initial: null,\n    translated: null\n  });\n  var active = useMemo(function () {\n    var _node$data;\n\n    return activeId != null ? {\n      id: activeId,\n      // It's possible for the active node to unmount while dragging\n      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n      rect: activeRects\n    } : null;\n  }, [activeId, node]);\n  var activeRef = useRef(null);\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      activeSensor = _useState10[0],\n      setActiveSensor = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      activatorEvent = _useState12[0],\n      setActivatorEvent = _useState12[1];\n\n  var latestProps = useRef(props);\n  var draggableDescribedById = useUniqueId(\"DndDescribedBy\", id);\n\n  var _useLayoutMeasuring = useLayoutMeasuring(droppableContainers, {\n    dragging: activeId != null,\n    dependencies: [translate.x, translate.y],\n    config: layoutMeasuring\n  }),\n      droppableRects = _useLayoutMeasuring.layoutRectMap,\n      recomputeLayouts = _useLayoutMeasuring.recomputeLayouts,\n      willRecomputeLayouts = _useLayoutMeasuring.willRecomputeLayouts;\n\n  var activeNode = useCachedNode(draggableNodes, activeId);\n  var activationCoordinates = activatorEvent ? getEventCoordinates(activatorEvent) : null;\n  var activeNodeRect = useViewRect(activeNode);\n  var activeNodeClientRect = useClientRect(activeNode);\n  var initialActiveNodeRectRef = useRef(null);\n  var initialActiveNodeRect = initialActiveNodeRectRef.current;\n  var nodeRectDelta = getRectDelta(activeNodeRect, initialActiveNodeRect);\n  var sensorContext = useRef({\n    active: null,\n    activeNode: activeNode,\n    collisionRect: null,\n    droppableRects: droppableRects,\n    draggableNodes: draggableNodes,\n    draggingNodeRect: null,\n    droppableContainers: droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n    translatedRect: null\n  });\n  var overNode = getDroppableNode((_sensorContext$curren = (_sensorContext$curren2 = sensorContext.current.over) == null ? void 0 : _sensorContext$curren2.id) != null ? _sensorContext$curren : null, droppableContainers);\n  var windowRect = useClientRect(activeNode ? activeNode.ownerDocument.defaultView : null);\n  var containerNodeRect = useClientRect(activeNode ? activeNode.parentElement : null);\n  var scrollableAncestors = useScrollableAncestors(activeId ? overNode != null ? overNode : activeNode : null);\n  var scrollableAncestorRects = useClientRects(scrollableAncestors);\n\n  var _useNodeRef = useNodeRef(),\n      _useNodeRef2 = _slicedToArray(_useNodeRef, 2),\n      overlayNodeRef = _useNodeRef2[0],\n      setOverlayNodeRef = _useNodeRef2[1];\n\n  var overlayNodeRect = useClientRect(activeId ? overlayNodeRef.current : null, willRecomputeLayouts);\n  var draggingNodeRect = overlayNodeRect != null ? overlayNodeRect : activeNodeClientRect;\n  var modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1\n    },\n    active: active,\n    over: sensorContext.current.over,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect: draggingNodeRect,\n    containerNodeRect: containerNodeRect,\n    overlayNodeRect: overlayNodeRect,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects,\n    windowRect: windowRect\n  });\n  var pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;\n  var scrollAdjustment = useScrollOffsets(scrollableAncestors);\n  var scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n  var translatedRect = activeNodeRect ? getAdjustedRect(activeNodeRect, modifiedTranslate) : null;\n  var collisionRect = translatedRect ? getAdjustedRect(translatedRect, scrollAdjustment) : null;\n  var overId = active && collisionRect ? collisionDetection(Array.from(droppableRects.entries()), collisionRect) : null;\n  var overContainer = getOver(overId, droppableContainers);\n  var over = useMemo(function () {\n    return overContainer && overContainer.rect.current ? {\n      id: overContainer.id,\n      rect: overContainer.rect.current,\n      data: overContainer.data,\n      disabled: overContainer.disabled\n    } : null;\n  }, [overContainer]);\n  var transform = adjustScale(modifiedTranslate, (_overContainer$rect$c = overContainer == null ? void 0 : overContainer.rect.current) != null ? _overContainer$rect$c : null, activeNodeRect);\n  var instantiateSensor = useCallback(function (event, _ref30) {\n    var Sensor = _ref30.sensor,\n        options = _ref30.options;\n\n    if (!activeRef.current) {\n      return;\n    }\n\n    var activeNode = draggableNodes[activeRef.current];\n\n    if (!activeNode) {\n      return;\n    }\n\n    var sensorInstance = new Sensor({\n      active: activeRef.current,\n      activeNode: activeNode,\n      event: event.nativeEvent,\n      options: options,\n      // Sensors need to be instantiated with refs for arguments that change over time\n      // otherwise they are frozen in time with the stale arguments\n      context: sensorContext,\n      onStart: function onStart(initialCoordinates) {\n        var id = activeRef.current;\n\n        if (!id) {\n          return;\n        }\n\n        var node = draggableNodes[id];\n\n        if (!node) {\n          return;\n        }\n\n        var onDragStart = latestProps.current.onDragStart;\n        var event = {\n          active: {\n            id: id,\n            data: node.data,\n            rect: activeRects\n          }\n        };\n        dispatch({\n          type: Action.DragStart,\n          initialCoordinates: initialCoordinates,\n          active: id\n        });\n        setMonitorState({\n          type: Action.DragStart,\n          event: event\n        });\n        onDragStart == null ? void 0 : onDragStart(event);\n      },\n      onMove: function onMove(coordinates) {\n        dispatch({\n          type: Action.DragMove,\n          coordinates: coordinates\n        });\n      },\n      onEnd: createHandler(Action.DragEnd),\n      onCancel: createHandler(Action.DragCancel)\n    });\n    setActiveSensor(sensorInstance);\n    setActivatorEvent(event.nativeEvent);\n\n    function createHandler(type) {\n      return /*#__PURE__*/function () {\n        var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _sensorContext$curren3, active, over, scrollAdjustedTranslate, event, cancelDrop, shouldCancel, _latestProps$current, onDragCancel, onDragEnd, _handler2;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _sensorContext$curren3 = sensorContext.current, active = _sensorContext$curren3.active, over = _sensorContext$curren3.over, scrollAdjustedTranslate = _sensorContext$curren3.scrollAdjustedTranslate;\n                  event = null;\n\n                  if (!(active && scrollAdjustedTranslate)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  cancelDrop = latestProps.current.cancelDrop;\n                  event = {\n                    active: active,\n                    delta: scrollAdjustedTranslate,\n                    over: over\n                  };\n\n                  if (!(type === Action.DragEnd && typeof cancelDrop === 'function')) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return Promise.resolve(cancelDrop(event));\n\n                case 8:\n                  shouldCancel = _context.sent;\n\n                  if (shouldCancel) {\n                    type = Action.DragCancel;\n                  }\n\n                case 10:\n                  activeRef.current = null;\n                  dispatch({\n                    type: type\n                  });\n                  setActiveSensor(null);\n                  setActivatorEvent(null);\n\n                  if (event) {\n                    _latestProps$current = latestProps.current, onDragCancel = _latestProps$current.onDragCancel, onDragEnd = _latestProps$current.onDragEnd;\n                    _handler2 = type === Action.DragEnd ? onDragEnd : onDragCancel;\n                    setMonitorState({\n                      type: type,\n                      event: event\n                    });\n                    _handler2 == null ? void 0 : _handler2(event);\n                  }\n\n                case 15:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function handler() {\n          return _handler.apply(this, arguments);\n        }\n\n        return handler;\n      }();\n    }\n  }, [dispatch, draggableNodes]);\n  var bindActivatorToSensorInstantiator = useCallback(function (handler, sensor) {\n    return function (event, active) {\n      var nativeEvent = event.nativeEvent;\n\n      if ( // No active draggable\n      activeRef.current !== null || // Event has already been captured\n      nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n        return;\n      }\n\n      if (handler(event, sensor.options) === true) {\n        nativeEvent.dndKit = {\n          capturedBy: sensor.sensor\n        };\n        activeRef.current = active;\n        instantiateSensor(event, sensor);\n      }\n    };\n  }, [instantiateSensor]);\n  var activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n  useIsomorphicLayoutEffect(function () {\n    latestProps.current = props;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  Object.values(props));\n  useEffect(function () {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n  useEffect(function () {\n    var onDragMove = latestProps.current.onDragMove;\n    var _sensorContext$curren4 = sensorContext.current,\n        active = _sensorContext$curren4.active,\n        over = _sensorContext$curren4.over;\n\n    if (!active) {\n      return;\n    }\n\n    var event = {\n      active: active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over: over\n    };\n    setMonitorState({\n      type: Action.DragMove,\n      event: event\n    });\n    onDragMove == null ? void 0 : onDragMove(event);\n  }, [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n  useEffect(function () {\n    var _sensorContext$curren5 = sensorContext.current,\n        active = _sensorContext$curren5.active,\n        scrollAdjustedTranslate = _sensorContext$curren5.scrollAdjustedTranslate;\n\n    if (!active || !activeRef.current || !scrollAdjustedTranslate) {\n      return;\n    }\n\n    var onDragOver = latestProps.current.onDragOver;\n    var event = {\n      active: active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over: over\n    };\n    setMonitorState({\n      type: Action.DragOver,\n      event: event\n    });\n    onDragOver == null ? void 0 : onDragOver(event);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [over == null ? void 0 : over.id]);\n  useIsomorphicLayoutEffect(function () {\n    sensorContext.current = {\n      active: active,\n      activeNode: activeNode,\n      collisionRect: collisionRect,\n      droppableRects: droppableRects,\n      draggableNodes: draggableNodes,\n      draggingNodeRect: draggingNodeRect,\n      droppableContainers: droppableContainers,\n      over: over,\n      scrollableAncestors: scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate,\n      translatedRect: translatedRect\n    };\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: translatedRect\n    };\n  }, [active, activeNode, collisionRect, draggableNodes, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate, translatedRect]);\n  useAutoScroller(_objectSpread(_objectSpread({}, getAutoScrollerOptions()), {}, {\n    draggingRect: translatedRect,\n    pointerCoordinates: pointerCoordinates,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects\n  }));\n  var contextValue = useMemo(function () {\n    var memoizedContext = {\n      active: active,\n      activeNode: activeNode,\n      activeNodeRect: activeNodeRect,\n      activeNodeClientRect: activeNodeClientRect,\n      activatorEvent: activatorEvent,\n      activators: activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById\n      },\n      overlayNode: {\n        nodeRef: overlayNodeRef,\n        rect: overlayNodeRect,\n        setRef: setOverlayNodeRef\n      },\n      containerNodeRect: containerNodeRect,\n      dispatch: dispatch,\n      draggableNodes: draggableNodes,\n      droppableContainers: droppableContainers,\n      droppableRects: droppableRects,\n      over: over,\n      recomputeLayouts: recomputeLayouts,\n      scrollableAncestors: scrollableAncestors,\n      scrollableAncestorRects: scrollableAncestorRects,\n      willRecomputeLayouts: willRecomputeLayouts,\n      windowRect: windowRect\n    };\n    return memoizedContext;\n  }, [active, activeNode, activeNodeClientRect, activeNodeRect, activatorEvent, activators, containerNodeRect, overlayNodeRect, overlayNodeRef, dispatch, draggableNodes, draggableDescribedById, droppableContainers, droppableRects, over, recomputeLayouts, scrollableAncestors, scrollableAncestorRects, setOverlayNodeRef, willRecomputeLayouts, windowRect]);\n  return React.createElement(DndMonitorContext.Provider, {\n    value: monitorState\n  }, React.createElement(Context.Provider, {\n    value: contextValue\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: transform\n  }, children)), React.createElement(Accessibility, {\n    announcements: announcements,\n    hiddenTextDescribedById: draggableDescribedById,\n    screenReaderInstructions: screenReaderInstructions$1\n  }));\n\n  function getAutoScrollerOptions() {\n    var activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n    var autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n    var enabled = !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return _objectSpread(_objectSpread({}, autoScroll), {}, {\n        enabled: enabled\n      });\n    }\n\n    return {\n      enabled: enabled\n    };\n  }\n});\n\nfunction getDroppableNode(id, droppableContainers) {\n  var _droppableContainers$, _droppableContainers$2;\n\n  return id ? (_droppableContainers$ = (_droppableContainers$2 = droppableContainers[id]) == null ? void 0 : _droppableContainers$2.node.current) != null ? _droppableContainers$ : null : null;\n}\n\nfunction getOver(id, droppableContainers) {\n  var _droppableContainers$3;\n\n  return id ? (_droppableContainers$3 = droppableContainers[id]) != null ? _droppableContainers$3 : null : null;\n}\n\nvar NullContext = /*#__PURE__*/createContext(null);\nvar defaultRole = 'button';\n\nfunction useDraggable(_ref31) {\n  var id = _ref31.id,\n      data = _ref31.data,\n      _ref31$disabled = _ref31.disabled,\n      disabled = _ref31$disabled === void 0 ? false : _ref31$disabled,\n      attributes = _ref31.attributes;\n\n  var _useContext = useContext(Context),\n      active = _useContext.active,\n      activeNodeRect = _useContext.activeNodeRect,\n      activatorEvent = _useContext.activatorEvent,\n      ariaDescribedById = _useContext.ariaDescribedById,\n      draggableNodes = _useContext.draggableNodes,\n      droppableRects = _useContext.droppableRects,\n      activators = _useContext.activators,\n      over = _useContext.over;\n\n  var _ref32 = attributes != null ? attributes : {},\n      _ref32$role = _ref32.role,\n      role = _ref32$role === void 0 ? defaultRole : _ref32$role,\n      _ref32$roleDescriptio = _ref32.roleDescription,\n      roleDescription = _ref32$roleDescriptio === void 0 ? 'draggable' : _ref32$roleDescriptio,\n      _ref32$tabIndex = _ref32.tabIndex,\n      tabIndex = _ref32$tabIndex === void 0 ? 0 : _ref32$tabIndex;\n\n  var isDragging = (active == null ? void 0 : active.id) === id;\n  var transform = useContext(isDragging ? ActiveDraggableContext : NullContext);\n\n  var _useNodeRef3 = useNodeRef(),\n      _useNodeRef4 = _slicedToArray(_useNodeRef3, 2),\n      node = _useNodeRef4[0],\n      setNodeRef = _useNodeRef4[1];\n\n  var listeners = useSyntheticListeners(activators, id);\n  var dataRef = useData(data);\n  useEffect(function () {\n    draggableNodes[id] = {\n      node: node,\n      data: dataRef\n    };\n    return function () {\n      delete draggableNodes[id];\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes, id]);\n  var memoizedAttributes = useMemo(function () {\n    return {\n      role: role,\n      tabIndex: tabIndex,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable\n    };\n  }, [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);\n  return {\n    active: active,\n    activeNodeRect: activeNodeRect,\n    activatorEvent: activatorEvent,\n    attributes: memoizedAttributes,\n    droppableRects: droppableRects,\n    isDragging: isDragging,\n    listeners: disabled ? undefined : listeners,\n    node: node,\n    over: over,\n    setNodeRef: setNodeRef,\n    transform: transform\n  };\n}\n\nfunction useDndContext() {\n  return useContext(Context);\n}\n\nfunction useDroppable(_ref33) {\n  var data = _ref33.data,\n      _ref33$disabled = _ref33.disabled,\n      disabled = _ref33$disabled === void 0 ? false : _ref33$disabled,\n      id = _ref33.id;\n\n  var _useContext2 = useContext(Context),\n      active = _useContext2.active,\n      dispatch = _useContext2.dispatch,\n      over = _useContext2.over;\n\n  var rect = useRef(null);\n\n  var _useNodeRef5 = useNodeRef(),\n      _useNodeRef6 = _slicedToArray(_useNodeRef5, 2),\n      nodeRef = _useNodeRef6[0],\n      setNodeRef = _useNodeRef6[1];\n\n  var dataRef = useData(data);\n  useIsomorphicLayoutEffect(function () {\n    dispatch({\n      type: Action.RegisterDroppable,\n      element: {\n        id: id,\n        disabled: disabled,\n        node: nodeRef,\n        rect: rect,\n        data: dataRef\n      }\n    });\n    return function () {\n      return dispatch({\n        type: Action.UnregisterDroppable,\n        id: id\n      });\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id]);\n  useEffect(function () {\n    dispatch({\n      type: Action.SetDroppableDisabled,\n      id: id,\n      disabled: disabled\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    active: active,\n    rect: rect,\n    isOver: (over == null ? void 0 : over.id) === id,\n    node: nodeRef,\n    over: over,\n    setNodeRef: setNodeRef\n  };\n}\n\nfunction useDerivedTransform(transform, rect, overlayNode) {\n  var prevRect = useRef(rect);\n  return useLazyMemo(function (previousValue) {\n    var initial = prevRect.current;\n\n    if (rect !== initial) {\n      if (rect && initial) {\n        var layoutHasChanged = initial.left !== rect.left || initial.top !== rect.top;\n\n        if (layoutHasChanged && !previousValue) {\n          var overlayNodeRect = overlayNode == null ? void 0 : overlayNode.getBoundingClientRect();\n\n          if (overlayNodeRect) {\n            var delta = _objectSpread(_objectSpread({}, transform), {}, {\n              x: overlayNodeRect.left - rect.left,\n              y: overlayNodeRect.top - rect.top\n            });\n\n            return delta;\n          }\n        }\n      }\n\n      prevRect.current = rect;\n    }\n\n    return undefined;\n  }, [rect, transform, overlayNode]);\n}\n\nfunction useDropAnimation(_ref34) {\n  var animate = _ref34.animate,\n      adjustScale = _ref34.adjustScale,\n      activeId = _ref34.activeId,\n      draggableNodes = _ref34.draggableNodes,\n      duration = _ref34.duration,\n      easing = _ref34.easing,\n      dragSourceOpacity = _ref34.dragSourceOpacity,\n      node = _ref34.node,\n      transform = _ref34.transform;\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dropAnimationComplete = _useState14[0],\n      setDropAnimationComplete = _useState14[1];\n\n  useEffect(function () {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(function () {\n      var _draggableNodes$activ;\n\n      var finalNode = (_draggableNodes$activ = draggableNodes[activeId]) == null ? void 0 : _draggableNodes$activ.node.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        var fromNode = node.children.length > 1 ? node : node.children[0];\n\n        if (fromNode) {\n          var from = fromNode.getBoundingClientRect();\n          var to = getViewRect(finalNode);\n          var delta = {\n            x: from.left - to.left,\n            y: from.top - to.top\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            var scaleDelta = {\n              scaleX: adjustScale ? to.width * transform.scaleX / from.width : 1,\n              scaleY: adjustScale ? to.height * transform.scaleY / from.height : 1\n            };\n            var finalTransform = CSS.Transform.toString(_objectSpread({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y\n            }, scaleDelta));\n            var originalOpacity = finalNode.style.opacity;\n\n            if (dragSourceOpacity != null) {\n              finalNode.style.opacity = \"\".concat(dragSourceOpacity);\n            }\n\n            var nodeAnimation = node.animate([{\n              transform: CSS.Transform.toString(transform)\n            }, {\n              transform: finalTransform\n            }], {\n              easing: easing,\n              duration: duration\n            });\n\n            nodeAnimation.onfinish = function () {\n              node.style.display = 'none';\n              setDropAnimationComplete(true);\n\n              if (finalNode && dragSourceOpacity != null) {\n                finalNode.style.opacity = originalOpacity;\n              }\n            };\n\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [animate, activeId, adjustScale, draggableNodes, duration, easing, dragSourceOpacity, node, transform]);\n  useIsomorphicLayoutEffect(function () {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n  return dropAnimationComplete;\n}\n\nvar defaultTransition = function defaultTransition(activatorEvent) {\n  var isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nvar defaultDropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0\n};\nvar DragOverlay = /*#__PURE__*/React.memo(function (_ref35) {\n  var _ref35$adjustScale = _ref35.adjustScale,\n      adjustScale = _ref35$adjustScale === void 0 ? false : _ref35$adjustScale,\n      children = _ref35.children,\n      _ref35$dropAnimation = _ref35.dropAnimation,\n      dropAnimation = _ref35$dropAnimation === void 0 ? defaultDropAnimation : _ref35$dropAnimation,\n      styleProp = _ref35.style,\n      _ref35$transition = _ref35.transition,\n      transition = _ref35$transition === void 0 ? defaultTransition : _ref35$transition,\n      modifiers = _ref35.modifiers,\n      _ref35$wrapperElement = _ref35.wrapperElement,\n      wrapperElement = _ref35$wrapperElement === void 0 ? 'div' : _ref35$wrapperElement,\n      className = _ref35.className,\n      _ref35$zIndex = _ref35.zIndex,\n      zIndex = _ref35$zIndex === void 0 ? 999 : _ref35$zIndex;\n\n  var _active$id, _attributesSnapshot$c;\n\n  var _useDndContext = useDndContext(),\n      active = _useDndContext.active,\n      activeNodeRect = _useDndContext.activeNodeRect,\n      activeNodeClientRect = _useDndContext.activeNodeClientRect,\n      containerNodeRect = _useDndContext.containerNodeRect,\n      draggableNodes = _useDndContext.draggableNodes,\n      activatorEvent = _useDndContext.activatorEvent,\n      over = _useDndContext.over,\n      overlayNode = _useDndContext.overlayNode,\n      scrollableAncestors = _useDndContext.scrollableAncestors,\n      scrollableAncestorRects = _useDndContext.scrollableAncestorRects,\n      windowRect = _useDndContext.windowRect;\n\n  var transform = useContext(ActiveDraggableContext);\n  var modifiedTransform = applyModifiers(modifiers, {\n    active: active,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect: overlayNode.rect,\n    containerNodeRect: containerNodeRect,\n    over: over,\n    overlayNodeRect: overlayNode.rect,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects,\n    transform: transform,\n    windowRect: windowRect\n  });\n  var derivedTransform = useDerivedTransform(modifiedTransform, activeNodeRect, overlayNode.nodeRef.current);\n  var isDragging = active !== null;\n  var intermediateTransform = derivedTransform != null ? derivedTransform : modifiedTransform;\n  var finalTransform = adjustScale ? intermediateTransform : _objectSpread(_objectSpread({}, intermediateTransform), {}, {\n    scaleX: 1,\n    scaleY: 1\n  });\n  var style = activeNodeRect ? _objectSpread({\n    position: 'fixed',\n    width: activeNodeRect.width,\n    height: activeNodeRect.height,\n    top: activeNodeRect.top,\n    left: activeNodeRect.left,\n    zIndex: zIndex,\n    transform: CSS.Transform.toString(finalTransform),\n    touchAction: 'none',\n    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, activeNodeRect) : undefined,\n    transition: derivedTransform ? undefined : typeof transition === 'function' ? transition(activatorEvent) : transition\n  }, styleProp) : undefined;\n  var attributes = isDragging ? {\n    style: style,\n    children: children,\n    className: className,\n    transform: finalTransform\n  } : undefined;\n  var attributesSnapshot = useRef(attributes);\n  var derivedAttributes = attributes != null ? attributes : attributesSnapshot.current;\n\n  var _ref36 = derivedAttributes != null ? derivedAttributes : {},\n      finalChildren = _ref36.children,\n      _ = _ref36.transform,\n      otherAttributes = _objectWithoutProperties(_ref36, _excluded3);\n\n  var prevActiveId = useRef((_active$id = active == null ? void 0 : active.id) != null ? _active$id : null);\n  var dropAnimationComplete = useDropAnimation({\n    animate: Boolean(dropAnimation && prevActiveId.current && !active),\n    adjustScale: adjustScale,\n    activeId: prevActiveId.current,\n    draggableNodes: draggableNodes,\n    duration: dropAnimation == null ? void 0 : dropAnimation.duration,\n    easing: dropAnimation == null ? void 0 : dropAnimation.easing,\n    dragSourceOpacity: dropAnimation == null ? void 0 : dropAnimation.dragSourceOpacity,\n    node: overlayNode.nodeRef.current,\n    transform: (_attributesSnapshot$c = attributesSnapshot.current) == null ? void 0 : _attributesSnapshot$c.transform\n  });\n  var shouldRender = Boolean(finalChildren && (children || dropAnimation && !dropAnimationComplete));\n  useEffect(function () {\n    if ((active == null ? void 0 : active.id) !== prevActiveId.current) {\n      var _active$id2;\n\n      prevActiveId.current = (_active$id2 = active == null ? void 0 : active.id) != null ? _active$id2 : null;\n    }\n\n    if (active && attributesSnapshot.current !== attributes) {\n      attributesSnapshot.current = attributes;\n    }\n  }, [active, attributes]);\n  useEffect(function () {\n    if (dropAnimationComplete) {\n      attributesSnapshot.current = undefined;\n    }\n  }, [dropAnimationComplete]);\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  return React.createElement(wrapperElement, _objectSpread(_objectSpread({}, otherAttributes), {}, {\n    ref: overlayNode.setRef\n  }), finalChildren);\n});\nexport { AutoScrollActivator, DndContext, DragOverlay, KeyboardCode, KeyboardSensor, LayoutMeasuringFrequency, LayoutMeasuringStrategy, MouseSensor, PointerSensor, TouchSensor, TraversalOrder, applyModifiers, closestCenter, closestCorners, defaultAnnouncements, defaultCoordinates, defaultDropAnimation, getBoundingClientRect, getScrollableAncestors, getViewRect, rectIntersection, useDndContext, useDndMonitor, useDraggable, useDroppable, useSensor, useSensors };","map":{"version":3,"sources":["../src/components/Accessibility/defaults.ts","../src/store/actions.ts","../src/utilities/other/getValueIndex.ts","../src/utilities/other/noop.ts","../src/utilities/other/omit.ts","../src/store/context.ts","../src/utilities/coordinates/constants.ts","../src/utilities/coordinates/distanceBetweenPoints.ts","../src/utilities/event/isTouchEvent.ts","../src/utilities/event/isMouseEvent.ts","../src/utilities/coordinates/getEventCoordinates.ts","../src/utilities/coordinates/getRelativeTransformOrigin.ts","../src/utilities/algorithms/closestCenter.ts","../src/utilities/rect/adjustScale.ts","../src/utilities/rect/getRectDelta.ts","../src/utilities/rect/rectAdjustment.ts","../src/utilities/scroll/isScrollable.ts","../src/utilities/scroll/getScrollableAncestors.ts","../src/utilities/scroll/getScrollableElement.ts","../src/utilities/scroll/getScrollCoordinates.ts","../src/types/direction.ts","../src/utilities/scroll/getScrollPosition.ts","../src/utilities/scroll/documentScrollingElement.ts","../src/utilities/scroll/getScrollDirectionAndSpeed.ts","../src/utilities/scroll/getScrollElementRect.ts","../src/utilities/scroll/getScrollOffsets.ts","../src/utilities/rect/getRect.ts","../src/utilities/rect/isViewRect.ts","../src/utilities/algorithms/closestCorners.ts","../src/utilities/algorithms/rectIntersection.ts","../src/utilities/document/getOwnerDocument.ts","../src/utilities/document/getWindow.ts","../src/store/reducer.ts","../src/hooks/monitor/useDndMonitor.ts","../src/components/Accessibility/Accessibility.tsx","../src/hooks/utilities/useAutoScroller.ts","../src/hooks/utilities/useCachedNode.ts","../src/hooks/utilities/useCombineActivators.ts","../src/hooks/utilities/useData.ts","../src/hooks/utilities/useLayoutMeasuring.ts","../src/hooks/utilities/useScrollOffsets.ts","../src/hooks/utilities/useScrollableAncestors.ts","../src/hooks/utilities/useSyntheticListeners.ts","../src/hooks/utilities/useRect.ts","../src/sensors/useSensor.ts","../src/sensors/useSensors.ts","../src/sensors/utilities/Listeners.ts","../src/sensors/utilities/getEventListenerTarget.ts","../src/sensors/utilities/hasExceededDistance.ts","../src/sensors/keyboard/types.ts","../src/sensors/keyboard/defaults.ts","../src/sensors/keyboard/KeyboardSensor.ts","../src/sensors/pointer/AbstractPointerSensor.ts","../src/sensors/pointer/PointerSensor.ts","../src/sensors/mouse/MouseSensor.ts","../src/sensors/touch/TouchSensor.ts","../src/modifiers/applyModifiers.ts","../src/components/DndContext/DndContext.tsx","../src/hooks/useDraggable.ts","../src/hooks/useDndContext.ts","../src/hooks/useDroppable.ts","../src/components/DragOverlay/hooks/useDerivedTransform.ts","../src/components/DragOverlay/hooks/useDropAnimation.ts","../src/components/DragOverlay/DragOverlay.tsx"],"names":["screenReaderInstructions","draggable","defaultAnnouncements","onDragStart","onDragOver","id","onDragEnd","onDragCancel","Action","getMaxValueIndex","array","getValueIndex","value","getMinValueIndex","comparator","tracked","index","i","noop","_args","omit","elements","other","Context","createContext","activatorEvent","active","activeNode","activeNodeRect","activeNodeClientRect","activators","ariaDescribedById","containerNodeRect","dispatch","draggableNodes","droppableRects","droppableContainers","over","overlayNode","nodeRef","current","rect","setRef","scrollableAncestors","scrollableAncestorRects","recomputeLayouts","windowRect","willRecomputeLayouts","defaultCoordinates","x","y","distanceBetween","p1","p2","Math","isTouchEvent","event","isMouseEvent","getEventCoordinates","clientX","clientY","getRelativeTransformOrigin","eventCoordinates","transformOrigin","left","top","closestCenter","centerRect","centerOfRectangle","distances","rects","minValueIndex","adjustScale","transform","rect1","rect2","scaleX","scaleY","getRectDelta","createRectAdjustmentFn","modifier","acc","adjustment","bottom","right","offsetLeft","offsetTop","viewRect","getAdjustedRect","isScrollable","node","computedStyle","window","overflowRegex","properties","property","getScrollableAncestors","element","scrollParents","findScrollableAncestors","getScrollableElement","document","getScrollCoordinates","scrollY","scrollTop","Direction","getScrollPosition","scrollingContainer","minScroll","maxScroll","clientHeight","isTop","isLeft","isBottom","isRight","isDocumentScrollingElement","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","clientWidth","finalScrollContainerRect","width","height","direction","speed","threshold","getScrollElementRect","innerHeight","getScrollOffsets","add","offset","nodeOffset","getEdgeOffset","getElementLayout","offsetWidth","offsetHeight","getBoundingClientRect","getViewRect","scrollOffsets","isViewRect","entry","closestCorners","corners","cornersOfRectangle","target","entryCorners","accumulator","Number","entries","targetArea","entryArea","intersectionArea","intersectionRatio","rectIntersection","intersections","getIntersectionRatio","maxValueIndex","getOwnerDocument","getWindow","getInitialState","initialCoordinates","nodes","translate","droppable","containers","reducer","state","action","disabled","DndMonitorContext","type","useDndMonitor","monitorState","useContext","previousMonitorState","useRef","useEffect","onDragMove","Accessibility","announcements","announcement","useAnnouncement","liveRegionId","useUniqueId","useState","setMounted","useMemo","announce","mounted","createPortal","hiddenTextDescribedById","AutoScrollActivator","TraversalOrder","useAutoScroller","activator","interval","order","useInterval","scrollSpeed","pointerCoordinates","scrollDirection","scrollContainerRef","autoScroll","useCallback","scrollLeft","sortedScrollableAncestors","clearAutoScrollInterval","scrolllContainerRect","setAutoScrollInterval","JSON","useCachedNode","draggableNode","useLazyMemo","cachedNode","useCombineActivators","sensors","getSyntheticHandler","sensor","Sensor","sensorActivators","eventName","handler","useData","data","dataRef","useIsomorphicLayoutEffect","LayoutMeasuringStrategy","LayoutMeasuringFrequency","defaultValue","useLayoutMeasuring","config","strategy","getLayoutMeasuring","containersRef","setWillRecomputeLayouts","recomputeLayoutsTimeoutId","isDisabled","layoutRectMap","previousValue","container","Object","createLayoutRectMap","requestAnimationFrame","setTimeout","defaultLayoutMeasuring","frequency","Optimized","layoutMeasuring","useScrollOffsets","prevElements","handleScroll","scrollingElement","setScrollCoordinates","scrollCoordinates","previousElements","cleanup","scrollableElement","passive","Array","useScrollableAncestors","previousNode","ancestors","useSyntheticListeners","listeners","useClientRect","createUseRectFn","useClientRects","createUseRectsFn","useViewRect","previousElement","forceRecompute","getRect","useSensor","options","useSensors","Listeners","constructor","removeAll","getEventListenerTarget","hasExceededDistance","delta","measurement","dx","dy","KeyboardCode","defaultKeyboardCodes","start","cancel","end","defaultKeyboardCoordinateGetter","currentCoordinates","KeyboardSensor","attach","handleStart","onStart","coordinates","handleKeyDown","keyboardCodes","coordinateGetter","scrollBehavior","code","newCoordinates","context","scrollDelta","coordinatesDelta","getCoordinatesDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","canFullyScrollToNewCoordinates","behavior","getAdjustedCoordinates","handleMove","onMove","handleEnd","onEnd","handleCancel","onCancel","detach","onActivation","nativeEvent","Boolean","constraint","EventName","AbstractPointerSensor","listenerTarget","props","activationConstraint","events","isDistanceConstraint","isDelayConstraint","clearTimeout","handleKeydown","move","name","PointerSensor","MouseButton","MouseSensor","TouchSensor","touches","applyModifiers","modifiers","args","defaultSensors","defaultData","ActiveDraggableContext","DndContext","memo","collisionDetection","store","useReducer","activeId","activeRects","initial","translated","activeRef","latestProps","draggableDescribedById","dragging","dependencies","activationCoordinates","initialActiveNodeRectRef","initialActiveNodeRect","nodeRectDelta","sensorContext","collisionRect","draggingNodeRect","scrollAdjustedTranslate","translatedRect","overNode","getDroppableNode","useNodeRef","overlayNodeRect","overlayNodeRef","modifiedTranslate","scrollAdjustment","overId","overContainer","getOver","instantiateSensor","sensorInstance","setMonitorState","createHandler","setActiveSensor","setActivatorEvent","cancelDrop","shouldCancel","Promise","bindActivatorToSensorInstantiator","capturedBy","getAutoScrollerOptions","draggingRect","contextValue","memoizedContext","setOverlayNodeRef","activeSensorDisablesAutoscroll","autoScrollGloballyDisabled","enabled","NullContext","defaultRole","useDraggable","attributes","role","roleDescription","tabIndex","isDragging","memoizedAttributes","setNodeRef","useDndContext","useDroppable","isOver","useDerivedTransform","prevRect","layoutHasChanged","useDropAnimation","setDropAnimationComplete","finalNode","fromNode","from","to","scaleDelta","finalTransform","originalOpacity","dragSourceOpacity","nodeAnimation","CSS","easing","duration","defaultTransition","isKeyboardActivator","defaultDropAnimation","DragOverlay","dropAnimation","style","transition","wrapperElement","zIndex","modifiedTransform","derivedTransform","intermediateTransform","position","touchAction","styleProp","children","className","attributesSnapshot","derivedAttributes","otherAttributes","prevActiveId","dropAnimationComplete","animate","shouldRender","finalChildren","ref"],"mappings":"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","sourcesContent":["import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const screenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  },\n};\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n    };\n","export const getMaxValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value > tracked);\n\nexport const getMinValueIndex = (array: number[]) =>\n  getValueIndex(array, (value, tracked) => value < tracked);\n\n/**\n * Returns the index of the smallest number in an array of numbers\n */\nexport function getValueIndex(\n  array: number[],\n  comparator: (value: number, tracked: number) => boolean\n) {\n  if (array.length === 0) {\n    return -1;\n  }\n\n  let tracked = array[0];\n  let index = 0;\n\n  for (var i = 1; i < array.length; i++) {\n    if (comparator(array[i], tracked)) {\n      index = i;\n      tracked = array[i];\n    }\n  }\n\n  return index;\n}\n","export function noop(..._args: any) {}\n","export function omit<T>(id: string, elements: Record<string, T>) {\n  const {[id]: _, ...other} = elements;\n\n  return other;\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport type {DndContextDescriptor} from './types';\n\nexport const Context = createContext<DndContextDescriptor>({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: '',\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: new Map(),\n  droppableContainers: {},\n  over: null,\n  overlayNode: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false,\n});\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import type {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","export function isTouchEvent(event: Event): event is TouchEvent {\n  return window?.TouchEvent && event instanceof TouchEvent;\n}\n","export function isMouseEvent(event: Event): event is MouseEvent {\n  return (\n    (window?.MouseEvent && event instanceof MouseEvent) ||\n    event.type.includes('mouse')\n  );\n}\n","import type {Coordinates} from '../../types';\nimport {isMouseEvent, isTouchEvent} from '../event';\n\n/**\n * Returns the normalized x and y coordinates for mouse and touch events.\n */\nexport function getEventCoordinates(event: Event): Coordinates {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {clientX: x, clientY: y} = event.touches[0];\n\n      return {\n        x,\n        y,\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {clientX: x, clientY: y} = event.changedTouches[0];\n\n      return {\n        x,\n        y,\n      };\n    }\n  }\n\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n  };\n}\n","import {getEventCoordinates} from './getEventCoordinates';\n\nexport function getRelativeTransformOrigin(\n  event: MouseEvent | TouchEvent | KeyboardEvent,\n  rect: ClientRect\n) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  const eventCoordinates = getEventCoordinates(event);\n  const transformOrigin = {\n    x: ((eventCoordinates.x - rect.left) / rect.width) * 100,\n    y: ((eventCoordinates.y - rect.top) / rect.height) * 100,\n  };\n\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n","import {getMinValueIndex} from '../other';\nimport {distanceBetween} from '../coordinates';\nimport type {Coordinates, LayoutRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nfunction centerOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n\n/**\n * Returns the closest rectangle from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = (rects, rect) => {\n  const centerRect = centerOfRectangle(rect, rect.left, rect.top);\n  const distances = rects.map(([_, rect]) =>\n    distanceBetween(centerOfRectangle(rect), centerRect)\n  );\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return rects[minValueIndex] ? rects[minValueIndex][0] : null;\n};\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {LayoutRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: LayoutRect | null,\n  rect2: LayoutRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import type {Coordinates, ViewRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ViewRect | null,\n  rect2: ViewRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import type {Coordinates, ViewRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustViewRect(\n    viewRect: ViewRect,\n    ...adjustments: Coordinates[]\n  ): ViewRect {\n    return adjustments.reduce<ViewRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n        offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n        offsetTop: acc.offsetTop + modifier * adjustment.y,\n      }),\n      {...viewRect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","export function isScrollable(node: HTMLElement): boolean {\n  const computedStyle = window.getComputedStyle(node);\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return (\n    properties.find((property) => {\n      const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n      return typeof value === 'string' ? overflowRegex.test(value) : false;\n    }) != null\n  );\n}\n","import {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(element: Node | null): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (isScrollable(node)) {\n      scrollParents.push(node);\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element.parentNode) : scrollParents;\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n","import type {Coordinates} from '../../types';\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY,\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop,\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","export function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","import {Direction, ViewRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\nimport {isDocumentScrollingElement} from './documentScrollingElement';\n\ninterface Rect extends Pick<ViewRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ViewRect,\n  {top, left, right, bottom}: Rect,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {clientHeight, clientWidth} = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer)\n    ? {\n        top: 0,\n        left: 0,\n        right: clientWidth,\n        bottom: clientHeight,\n        width: clientWidth,\n        height: clientHeight,\n      }\n    : scrollContainerRect;\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.top + threshold.height) - top) /\n          threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= finalScrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.bottom - threshold.height) - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.right - threshold.width) - right) /\n          threshold.width\n      );\n  } else if (\n    !isLeft &&\n    left <= finalScrollContainerRect.left + threshold.width\n  ) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        ((finalScrollContainerRect.left + threshold.width) - left) /\n          threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {getScrollCoordinates} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n","import type {Coordinates, ClientRect, LayoutRect, ViewRect} from '../../types';\nimport {getScrollableAncestors, getScrollOffsets} from '../scroll';\nimport {defaultCoordinates} from '../coordinates';\n\nfunction getEdgeOffset(\n  node: HTMLElement | null,\n  parent: (Node & ParentNode) | null,\n  offset = defaultCoordinates\n): Coordinates {\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  const nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop,\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent as HTMLElement, parent, nodeOffset);\n}\n\nexport function getElementLayout(element: HTMLElement): LayoutRect {\n  const {offsetWidth: width, offsetHeight: height} = element;\n  const {x: offsetLeft, y: offsetTop} = getEdgeOffset(element, null);\n\n  return {\n    width,\n    height,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getBoundingClientRect(\n  element: HTMLElement | Window\n): ClientRect {\n  if (element instanceof Window) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    return {\n      top: 0,\n      left: 0,\n      right: width,\n      bottom: height,\n      width,\n      height,\n      offsetTop: 0,\n      offsetLeft: 0,\n    };\n  }\n\n  const {offsetTop, offsetLeft} = getElementLayout(element);\n  const {\n    width,\n    height,\n    top,\n    bottom,\n    left,\n    right,\n  } = element.getBoundingClientRect();\n\n  return {\n    width,\n    height,\n    top,\n    bottom,\n    right,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n\nexport function getViewRect(element: HTMLElement): ViewRect {\n  const {width, height, offsetTop, offsetLeft} = getElementLayout(element);\n  const scrollableAncestors = getScrollableAncestors(element);\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n  const top = offsetTop - scrollOffsets.y;\n  const left = offsetLeft - scrollOffsets.x;\n\n  return {\n    width,\n    height,\n    top,\n    bottom: top + height,\n    right: left + width,\n    left,\n    offsetTop,\n    offsetLeft,\n  };\n}\n","import type {LayoutRect, ViewRect} from '../../types';\n\nexport function isViewRect(entry: LayoutRect | ViewRect): entry is ViewRect {\n  return 'top' in entry;\n}\n","import {getMinValueIndex} from '../other';\nimport {distanceBetween} from '../coordinates';\nimport {isViewRect} from '../rect';\nimport type {LayoutRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\n\nfunction cornersOfRectangle(\n  rect: LayoutRect,\n  left = rect.offsetLeft,\n  top = rect.offsetTop\n) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + rect.width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + rect.height,\n    },\n    {\n      x: left + rect.width,\n      y: top + rect.height,\n    },\n  ];\n}\n\n/**\n * Returns the closest rectangle from an array of rectangles to the corners of\n * another rectangle.\n */\nexport const closestCorners: CollisionDetection = (entries, target) => {\n  const corners = cornersOfRectangle(target, target.left, target.top);\n\n  const distances = entries.map(([_, entry]) => {\n    const entryCorners = cornersOfRectangle(\n      entry,\n      isViewRect(entry) ? entry.left : undefined,\n      isViewRect(entry) ? entry.top : undefined\n    );\n    const distances = corners.reduce((accumulator, corner, index) => {\n      return accumulator + distanceBetween(entryCorners[index], corner);\n    }, 0);\n\n    return Number((distances / 4).toFixed(4));\n  });\n\n  const minValueIndex = getMinValueIndex(distances);\n\n  return entries[minValueIndex] ? entries[minValueIndex][0] : null;\n};\n","import {getMaxValueIndex} from '../other';\nimport type {LayoutRect, ViewRect} from '../../types';\nimport type {CollisionDetection} from './types';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nfunction getIntersectionRatio(entry: LayoutRect, target: ViewRect): number {\n  const top = Math.max(target.top, entry.offsetTop);\n  const left = Math.max(target.left, entry.offsetLeft);\n  const right = Math.min(\n    target.left + target.width,\n    entry.offsetLeft + entry.width\n  );\n  const bottom = Math.min(\n    target.top + target.height,\n    entry.offsetTop + entry.height\n  );\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangle that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = (entries, target) => {\n  const intersections = entries.map(([_, entry]) =>\n    getIntersectionRatio(entry, target)\n  );\n\n  const maxValueIndex = getMaxValueIndex(intersections);\n\n  if (intersections[maxValueIndex] <= 0) {\n    return null;\n  }\n\n  return entries[maxValueIndex] ? entries[maxValueIndex][0] : null;\n};\n","export function getOwnerDocument(target: Event['target']) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n","import {getOwnerDocument} from './getOwnerDocument';\n\nexport function getWindow(target: Event['target']) {\n  return getOwnerDocument(target).defaultView ?? window;\n}\n","import {omit} from '../utilities';\nimport {Action, Actions} from './actions';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: {},\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: {},\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: element,\n          },\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, disabled} = action;\n      const element = state.droppable.containers[id];\n\n      if (!element) {\n        return state;\n      }\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: {\n            ...state.droppable.containers,\n            [id]: {\n              ...element,\n              disabled,\n            },\n          },\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id} = action;\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers: omit(id, state.droppable.containers),\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {createContext, useContext, useEffect, useRef} from 'react';\n\nimport {Action} from '../../store';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n} from '../../types';\n\nexport interface Arguments {\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface DndMonitorState {\n  type: Action | null;\n  event:\n    | null\n    | DragStartEvent\n    | DragMoveEvent\n    | DragOverEvent\n    | DragEndEvent\n    | DragCancelEvent;\n}\n\nexport const DndMonitorContext = createContext<DndMonitorState>({\n  type: null,\n  event: null,\n});\n\nexport function useDndMonitor({\n  onDragStart,\n  onDragMove,\n  onDragOver,\n  onDragEnd,\n  onDragCancel,\n}: Arguments) {\n  const monitorState = useContext(DndMonitorContext);\n  const previousMonitorState = useRef(monitorState);\n\n  useEffect(() => {\n    if (monitorState !== previousMonitorState.current) {\n      const {type, event} = monitorState;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart?.(event as DragStartEvent);\n          break;\n        case Action.DragMove:\n          onDragMove?.(event as DragMoveEvent);\n          break;\n        case Action.DragOver:\n          onDragOver?.(event as DragOverEvent);\n          break;\n        case Action.DragCancel:\n          onDragCancel?.(event as DragCancelEvent);\n          break;\n        case Action.DragEnd:\n          onDragEnd?.(event as DragEndEvent);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [\n    monitorState,\n    onDragStart,\n    onDragMove,\n    onDragOver,\n    onDragEnd,\n    onDragCancel,\n  ]);\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport type {UniqueIdentifier} from '../../types';\nimport {defaultAnnouncements} from './defaults';\nimport {DndMonitorArguments, useDndMonitor} from '../../hooks/monitor';\n\ninterface Props {\n  announcements?: Announcements;\n  screenReaderInstructions: ScreenReaderInstructions;\n  hiddenTextDescribedById: UniqueIdentifier;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  hiddenTextDescribedById,\n  screenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorArguments>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart(active.id));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove(active.id, over?.id));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver(active.id, over?.id));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd(active.id, over?.id));\n        },\n        onDragCancel({active}) {\n          announce(announcements.onDragCancel(active.id));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  return mounted\n    ? createPortal(\n        <>\n          <HiddenText\n            id={hiddenTextDescribedById}\n            value={screenReaderInstructions.draggable}\n          />\n          <LiveRegion id={liveRegionId} announcement={announcement} />\n        </>,\n        document.body\n      )\n    : null;\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed, defaultCoordinates} from '../../utilities';\nimport type {Coordinates, Direction, ViewRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ViewRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ViewRect[];\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  threshold,\n}: Arguments) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({\n    x: 1,\n    y: 1,\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollDirection = useRef<ScrollDirection>(defaultCoordinates);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrolllContainerRect = scrollableAncestorRects[index];\n\n        if (!scrolllContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrolllContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id !== null ? draggableNodes[id] : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id === null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorHandler} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorHandler,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useRef} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {Data} from '../../store';\n\nexport function useData(data: Data | undefined) {\n  const dataRef = useRef(data);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n\n  return dataRef;\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getElementLayout} from '../../utilities';\nimport type {DroppableContainers, LayoutRectMap} from '../../store/types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: Partial<LayoutMeasuring> | undefined;\n}\n\nexport enum LayoutMeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum LayoutMeasuringFrequency {\n  Optimized = 'optimized',\n}\n\nexport interface LayoutMeasuring {\n  strategy: LayoutMeasuringStrategy;\n  frequency: LayoutMeasuringFrequency | number;\n}\n\nconst defaultValue: LayoutRectMap = new Map();\n\nexport function useLayoutMeasuring(\n  containers: DroppableContainers,\n  {dragging, dependencies, config}: Arguments\n) {\n  const [willRecomputeLayouts, setWillRecomputeLayouts] = useState(false);\n  const {frequency, strategy} = getLayoutMeasuring(config);\n  const containersRef = useRef(containers);\n  const recomputeLayouts = useCallback(() => setWillRecomputeLayouts(true), []);\n  const recomputeLayoutsTimeoutId = useRef<NodeJS.Timeout | null>(null);\n  const disabled = isDisabled();\n  const layoutRectMap = useLazyMemo<LayoutRectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        willRecomputeLayouts\n      ) {\n        for (let container of Object.values(containers)) {\n          if (!container) {\n            continue;\n          }\n\n          container.rect.current = container.node.current\n            ? getElementLayout(container.node.current)\n            : null;\n        }\n\n        return createLayoutRectMap(containers);\n      }\n\n      return previousValue;\n    },\n    [containers, dragging, disabled, willRecomputeLayouts]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(() => {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n\n  useEffect(\n    function recompute() {\n      if (disabled) {\n        return;\n      }\n\n      requestAnimationFrame(recomputeLayouts);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(\n    function forceRecomputeLayouts() {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        recomputeLayoutsTimeoutId.current !== null\n      ) {\n        return;\n      }\n\n      recomputeLayoutsTimeoutId.current = setTimeout(() => {\n        recomputeLayouts();\n        recomputeLayoutsTimeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, recomputeLayouts, ...dependencies]\n  );\n\n  return {\n    layoutRectMap,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case LayoutMeasuringStrategy.Always:\n        return false;\n      case LayoutMeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction createLayoutRectMap(\n  containers: DroppableContainers | null\n): LayoutRectMap {\n  const layoutRectMap: LayoutRectMap = new Map();\n\n  if (containers) {\n    for (const container of Object.values(containers)) {\n      if (!container) {\n        continue;\n      }\n\n      const {id, rect, disabled} = container;\n\n      if (disabled || rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n\nconst defaultLayoutMeasuring: LayoutMeasuring = {\n  strategy: LayoutMeasuringStrategy.WhileDragging,\n  frequency: LayoutMeasuringFrequency.Optimized,\n};\n\nfunction getLayoutMeasuring(\n  layoutMeasuring: Arguments['config']\n): LayoutMeasuring {\n  return layoutMeasuring\n    ? {\n        ...defaultLayoutMeasuring,\n        ...layoutMeasuring,\n      }\n    : defaultLayoutMeasuring;\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: string\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {\n  getBoundingClientRect,\n  getElementLayout,\n  getViewRect,\n} from '../../utilities';\nimport type {LayoutRect} from '../../types';\n\ntype RectFn<T, U> = (element: U) => T;\n\nexport const useClientRect = createUseRectFn(getBoundingClientRect);\nexport const useClientRects = createUseRectsFn(getBoundingClientRect);\nexport const useViewRect = createUseRectFn(getViewRect);\nexport const useLayoutRect = createUseRectFn(getElementLayout);\n\nfunction createUseRectFn<T = LayoutRect, U = HTMLElement>(\n  getRect: RectFn<T, U>\n) {\n  return function useClientRect(\n    element: U | null,\n    forceRecompute?: boolean\n  ): T | null {\n    const previousElement = useRef(element);\n\n    return useLazyMemo<T | null>(\n      (previousValue) => {\n        if (!element) {\n          return null;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && element) ||\n          element !== previousElement.current\n        ) {\n          if (element instanceof HTMLElement && element.parentNode == null) {\n            return null;\n          }\n\n          return getRect(element as U);\n        }\n\n        return previousValue ?? null;\n      },\n      [element, forceRecompute]\n    );\n  };\n}\n\nfunction createUseRectsFn<T = LayoutRect>(getRect: RectFn<T, HTMLElement>) {\n  const defaultValue: T[] = [];\n\n  return function useRects(elements: Element[], forceRecompute?: boolean): T[] {\n    const previousElements = useRef(elements);\n\n    return useLazyMemo<T[]>(\n      (previousValue) => {\n        if (!elements.length) {\n          return defaultValue;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && elements.length) ||\n          elements !== previousElements.current\n        ) {\n          return elements.map((element) => getRect(element as HTMLElement));\n        }\n\n        return previousValue ?? defaultValue;\n      },\n      [elements, forceRecompute]\n    );\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n","export class Listeners {\n  private listeners: {\n    eventName: string;\n    handler: EventListenerOrEventListenerObject;\n  }[] = [];\n\n  constructor(private target: EventTarget) {}\n\n  public add(\n    eventName: string,\n    handler: EventListenerOrEventListenerObject,\n    options?: AddEventListenerOptions | false\n  ) {\n    this.target.addEventListener(eventName, handler, options);\n    this.listeners.push({eventName, handler});\n  }\n\n  public removeAll() {\n    this.listeners.forEach(({eventName, handler}) =>\n      this.target.removeEventListener(eventName, handler)\n    );\n  }\n}\n","import {getOwnerDocument} from '../../utilities';\n\nexport function getEventListenerTarget(\n  element: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  return element instanceof EventTarget ? element : getOwnerDocument(element);\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n} from '@dnd-kit/utilities';\n\nimport {Listeners} from '../utilities';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates} from '../../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\nimport {\n  defaultCoordinates,\n  getBoundingClientRect,\n  getOwnerDocument,\n  getWindow,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private coordinates: Coordinates = defaultCoordinates;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    setTimeout(() => {\n      this.listeners.add('keydown', this.handleKeyDown);\n      this.windowListeners.add('resize', this.handleCancel);\n    });\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n\n    if (!activeNode.node.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getBoundingClientRect(activeNode.node.current);\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top,\n    };\n\n    this.coordinates = coordinates;\n\n    onStart(coordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (event instanceof KeyboardEvent) {\n      const {coordinates} = this;\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates,\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const coordinatesDelta = getCoordinatesDelta(\n            newCoordinates,\n            coordinates\n          );\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll,\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                scrollContainer.scrollLeft + coordinatesDelta.x <=\n                  maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.x =\n              direction === KeyboardCode.Right\n                ? scrollContainer.scrollLeft - maxScroll.x\n                : scrollContainer.scrollLeft - minScroll.x;\n\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior,\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                scrollContainer.scrollTop + coordinatesDelta.y <=\n                  maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.y =\n              direction === KeyboardCode.Down\n                ? scrollContainer.scrollTop - maxScroll.y\n                : scrollContainer.scrollTop - minScroll.y;\n\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior,\n            });\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(newCoordinates, scrollDelta)\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {\n          keyboardCodes = defaultKeyboardCodes,\n          onActivation,\n        }: KeyboardSensorOptions\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {subtract as getCoordinatesDelta} from '@dnd-kit/utilities';\n\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\n\nimport {getEventCoordinates, getOwnerDocument} from '../../utilities';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint = DistanceConstraint | DelayConstraint;\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps = SensorProps<AbstractPointerSensorOptions>;\n\nenum EventName {\n  Keydown = 'keydown',\n}\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private ownerDocument: Document;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n\n    this.props = props;\n    this.events = events;\n    this.ownerDocument = getOwnerDocument(event.target);\n    this.listeners = new Listeners(listenerTarget);\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, false);\n    this.listeners.add(events.end.name, this.handleEnd);\n\n    this.ownerDocument.addEventListener(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.ownerDocument.removeEventListener(\n      EventName.Keydown,\n      this.handleKeydown\n    );\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event);\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onEnd} = this.props;\n\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onCancel} = this.props;\n\n    this.detach();\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n}\n","import type {PointerEvent} from 'react';\n\nimport {getOwnerDocument} from '../../utilities';\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\n\nimport {getOwnerDocument} from '../../utilities';\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  add,\n  Transform,\n  useIsomorphicLayoutEffect,\n  useNodeRef,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  Context,\n  DndContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport type {ViewRect} from '../../types';\nimport {DndMonitorContext, DndMonitorState} from '../../hooks/monitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useLayoutMeasuring,\n  useScrollableAncestors,\n  useClientRect,\n  useClientRects,\n  useScrollOffsets,\n  useViewRect,\n} from '../../hooks/utilities';\nimport type {\n  AutoScrollOptions,\n  LayoutMeasuring,\n  SyntheticListener,\n} from '../../hooks/utilities';\nimport {\n  KeyboardSensor,\n  PointerSensor,\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorHandler,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getRectDelta,\n  getEventCoordinates,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {\n  Active,\n  DroppableContainers,\n  DroppableContainer,\n  DataRef,\n} from '../../store/types';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  screenReaderInstructions as defaultScreenReaderInstructions,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nexport interface Props {\n  id?: string;\n  autoScroll?: boolean | AutoScrollOptions;\n  announcements?: Announcements;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  layoutMeasuring?: Partial<LayoutMeasuring>;\n  modifiers?: Modifiers;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  sensors?: SensorDescriptor<any>[];\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nconst defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nconst defaultData: DataRef = {current: {}};\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nexport const DndContext = memo(function DndContext({\n  id,\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  layoutMeasuring,\n  modifiers,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [monitorState, setMonitorState] = useState<DndMonitorState>(() => ({\n    type: null,\n    event: null,\n  }));\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId ? draggableNodes[activeId] : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useRef(props);\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const {\n    layoutRectMap: droppableRects,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useLayoutMeasuring(droppableContainers, {\n    dragging: activeId != null,\n    dependencies: [translate.x, translate.y],\n    config: layoutMeasuring,\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = activatorEvent\n    ? getEventCoordinates(activatorEvent)\n    : null;\n  const activeNodeRect = useViewRect(activeNode);\n  const activeNodeClientRect = useClientRect(activeNode);\n  const initialActiveNodeRectRef = useRef<ViewRect | null>(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n  const nodeRectDelta = getRectDelta(activeNodeRect, initialActiveNodeRect);\n  const sensorContext = useRef<SensorContext>({\n    active: null,\n    activeNode,\n    collisionRect: null,\n    droppableRects,\n    draggableNodes,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n    translatedRect: null,\n  });\n  const overNode = getDroppableNode(\n    sensorContext.current.over?.id ?? null,\n    droppableContainers\n  );\n  const windowRect = useClientRect(\n    activeNode ? activeNode.ownerDocument.defaultView : null\n  );\n  const containerNodeRect = useClientRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const scrollableAncestors = useScrollableAncestors(\n    activeId ? overNode ?? activeNode : null\n  );\n  const scrollableAncestorRects = useClientRects(scrollableAncestors);\n\n  const [overlayNodeRef, setOverlayNodeRef] = useNodeRef();\n  const overlayNodeRect = useClientRect(\n    activeId ? overlayNodeRef.current : null,\n    willRecomputeLayouts\n  );\n\n  const draggingNodeRect = overlayNodeRect ?? activeNodeClientRect;\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    active,\n    over: sensorContext.current.over,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect,\n    containerNodeRect,\n    overlayNodeRect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollAdjustment = useScrollOffsets(scrollableAncestors);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const translatedRect = activeNodeRect\n    ? getAdjustedRect(activeNodeRect, modifiedTranslate)\n    : null;\n\n  const collisionRect = translatedRect\n    ? getAdjustedRect(translatedRect, scrollAdjustment)\n    : null;\n\n  const overId =\n    active && collisionRect\n      ? collisionDetection(Array.from(droppableRects.entries()), collisionRect)\n      : null;\n  const overContainer = getOver(overId, droppableContainers);\n  const over = useMemo(\n    () =>\n      overContainer && overContainer.rect.current\n        ? {\n            id: overContainer.id,\n            rect: overContainer.rect.current,\n            data: overContainer.data,\n            disabled: overContainer.disabled,\n          }\n        : null,\n    [overContainer]\n  );\n\n  const transform = adjustScale(\n    modifiedTranslate,\n    overContainer?.rect.current ?? null,\n    activeNodeRect\n  );\n\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      const activeNode = draggableNodes[activeRef.current];\n\n      if (!activeNode) {\n        return;\n      }\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: event.nativeEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (!id) {\n            return;\n          }\n\n          const node = draggableNodes[id];\n\n          if (!node) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            active: {id, data: node.data, rect: activeRects},\n          };\n\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates,\n            active: id,\n          });\n          setMonitorState({type: Action.DragStart, event});\n          onDragStart?.(event);\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {active, over, scrollAdjustedTranslate} = sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              active: active,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          dispatch({type});\n          setActiveSensor(null);\n          setActivatorEvent(null);\n\n          if (event) {\n            const {onDragCancel, onDragEnd} = latestProps.current;\n            const handler = type === Action.DragEnd ? onDragEnd : onDragCancel;\n\n            setMonitorState({type, event});\n            handler?.(event);\n          }\n        };\n      }\n    },\n    [dispatch, draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorHandler,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n\n        if (\n          // No active draggable\n          activeRef.current !== null ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        if (handler(event, sensor.options) === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useIsomorphicLayoutEffect(\n    () => {\n      latestProps.current = props;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(props)\n  );\n\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n\n  useEffect(() => {\n    const {onDragMove} = latestProps.current;\n    const {active, over} = sensorContext.current;\n\n    if (!active) {\n      return;\n    }\n\n    const event: DragMoveEvent = {\n      active,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y,\n      },\n      over,\n    };\n\n    setMonitorState({type: Action.DragMove, event});\n    onDragMove?.(event);\n  }, [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n\n  useEffect(\n    () => {\n      const {active, scrollAdjustedTranslate} = sensorContext.current;\n\n      if (!active || !activeRef.current || !scrollAdjustedTranslate) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const event: DragOverEvent = {\n        active,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      setMonitorState({type: Action.DragOver, event});\n      onDragOver?.(event);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [over?.id]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      active,\n      activeNode,\n      collisionRect,\n      droppableRects,\n      draggableNodes,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate,\n      translatedRect,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: translatedRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisionRect,\n    draggableNodes,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n    translatedRect,\n  ]);\n\n  useAutoScroller({\n    ...getAutoScrollerOptions(),\n    draggingRect: translatedRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const contextValue = useMemo(() => {\n    const memoizedContext: DndContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activeNodeClientRect,\n      activatorEvent,\n      activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      overlayNode: {\n        nodeRef: overlayNodeRef,\n        rect: overlayNodeRect,\n        setRef: setOverlayNodeRef,\n      },\n      containerNodeRect,\n      dispatch,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      recomputeLayouts,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      willRecomputeLayouts,\n      windowRect,\n    };\n\n    return memoizedContext;\n  }, [\n    active,\n    activeNode,\n    activeNodeClientRect,\n    activeNodeRect,\n    activatorEvent,\n    activators,\n    containerNodeRect,\n    overlayNodeRect,\n    overlayNodeRef,\n    dispatch,\n    draggableNodes,\n    draggableDescribedById,\n    droppableContainers,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    setOverlayNodeRef,\n    willRecomputeLayouts,\n    windowRect,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={monitorState}>\n      <Context.Provider value={contextValue}>\n        <ActiveDraggableContext.Provider value={transform}>\n          {children}\n        </ActiveDraggableContext.Provider>\n      </Context.Provider>\n      <Accessibility\n        announcements={announcements}\n        hiddenTextDescribedById={draggableDescribedById}\n        screenReaderInstructions={screenReaderInstructions}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n\nfunction getDroppableNode(\n  id: UniqueIdentifier | null,\n  droppableContainers: DroppableContainers\n): HTMLElement | null {\n  return id ? droppableContainers[id]?.node.current ?? null : null;\n}\n\nfunction getOver(\n  id: UniqueIdentifier | null,\n  droppableContainers: DroppableContainers\n): DroppableContainer | null {\n  return id ? droppableContainers[id] ?? null : null;\n}\n","import {createContext, useContext, useEffect, useMemo} from 'react';\nimport {Transform, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context, Data} from '../store';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {\n  useData,\n  useSyntheticListeners,\n  SyntheticListenerMap,\n} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: string;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    ariaDescribedById,\n    draggableNodes,\n    droppableRects,\n    activators,\n    over,\n  } = useContext(Context);\n  const {role = defaultRole, roleDescription = 'draggable', tabIndex = 0} =\n    attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useData(data);\n\n  useEffect(\n    () => {\n      draggableNodes[id] = {node, data: dataRef};\n\n      return () => {\n        delete draggableNodes[id];\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]\n  );\n\n  return {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes: memoizedAttributes,\n    droppableRects,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform,\n  };\n}\n","import {ContextType, useContext} from 'react';\nimport {Context} from '../store';\n\nexport function useDndContext() {\n  return useContext(Context);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof Context>;\n","import {useContext, useEffect, useRef} from 'react';\nimport {useIsomorphicLayoutEffect, useNodeRef} from '@dnd-kit/utilities';\n\nimport {Context, Action, Data} from '../store';\nimport type {LayoutRect} from '../types';\nimport {useData} from './utilities';\n\nexport interface UseDroppableArguments {\n  id: string;\n  disabled?: boolean;\n  data?: Data;\n}\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n}: UseDroppableArguments) {\n  const {active, dispatch, over} = useContext(Context);\n  const rect = useRef<LayoutRect | null>(null);\n  const [nodeRef, setNodeRef] = useNodeRef();\n  const dataRef = useData(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        disabled,\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n","import {useRef} from 'react';\nimport {Transform, useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {ViewRect} from '../../../types';\n\nexport function useDerivedTransform(\n  transform: Transform,\n  rect: ViewRect | null,\n  overlayNode: HTMLElement | null\n) {\n  const prevRect = useRef(rect);\n\n  return useLazyMemo<Transform | undefined>(\n    (previousValue) => {\n      const initial = prevRect.current;\n\n      if (rect !== initial) {\n        if (rect && initial) {\n          const layoutHasChanged =\n            initial.left !== rect.left || initial.top !== rect.top;\n\n          if (layoutHasChanged && !previousValue) {\n            const overlayNodeRect = overlayNode?.getBoundingClientRect();\n\n            if (overlayNodeRect) {\n              const delta = {\n                ...transform,\n                x: overlayNodeRect.left - rect.left,\n                y: overlayNodeRect.top - rect.top,\n              };\n\n              return delta;\n            }\n          }\n        }\n\n        prevRect.current = rect;\n      }\n\n      return undefined;\n    },\n    [rect, transform, overlayNode]\n  );\n}\n","import {useEffect, useState} from 'react';\nimport {CSS, Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {UniqueIdentifier} from '../../../types';\nimport type {DraggableNodes} from '../../../store';\nimport {getViewRect} from '../../../utilities';\n\nexport interface DropAnimation {\n  duration: number;\n  easing: string;\n  dragSourceOpacity?: number;\n}\n\ninterface Arguments {\n  activeId: UniqueIdentifier | null;\n  animate: boolean;\n  adjustScale: boolean;\n  draggableNodes: DraggableNodes;\n  duration: DropAnimation['duration'] | undefined;\n  easing: DropAnimation['easing'] | undefined;\n  dragSourceOpacity: DropAnimation['dragSourceOpacity'] | undefined;\n  node: HTMLElement | null;\n  transform: Transform | undefined;\n}\n\nexport function useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  easing,\n  dragSourceOpacity,\n  node,\n  transform,\n}: Arguments) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n\n  useEffect(() => {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      const finalNode = draggableNodes[activeId]?.node.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        const fromNode = node.children.length > 1 ? node : node.children[0];\n\n        if (fromNode) {\n          const from = fromNode.getBoundingClientRect();\n          const to = getViewRect(finalNode);\n          const delta = {\n            x: from.left - to.left,\n            y: from.top - to.top,\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            const scaleDelta = {\n              scaleX: adjustScale\n                ? (to.width * transform.scaleX) / from.width\n                : 1,\n              scaleY: adjustScale\n                ? (to.height * transform.scaleY) / from.height\n                : 1,\n            };\n            const finalTransform = CSS.Transform.toString({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              ...scaleDelta,\n            });\n            const originalOpacity = finalNode.style.opacity;\n\n            if (dragSourceOpacity != null) {\n              finalNode.style.opacity = `${dragSourceOpacity}`;\n            }\n\n            const nodeAnimation = node.animate(\n              [\n                {\n                  transform: CSS.Transform.toString(transform),\n                },\n                {\n                  transform: finalTransform,\n                },\n              ],\n              {\n                easing,\n                duration,\n              }\n            );\n\n            nodeAnimation.onfinish = () => {\n              node.style.display = 'none';\n\n              setDropAnimationComplete(true);\n\n              if (finalNode && dragSourceOpacity != null) {\n                finalNode.style.opacity = originalOpacity;\n              }\n            };\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [\n    animate,\n    activeId,\n    adjustScale,\n    draggableNodes,\n    duration,\n    easing,\n    dragSourceOpacity,\n    node,\n    transform,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n\n  return dropAnimationComplete;\n}\n","import React, {useContext, useEffect, useRef} from 'react';\nimport {CSS} from '@dnd-kit/utilities';\n\nimport {getRelativeTransformOrigin} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport {ActiveDraggableContext} from '../DndContext';\nimport {useDndContext} from '../../hooks';\nimport {useDerivedTransform, useDropAnimation, DropAnimation} from './hooks';\n\ntype TransitionGetter = (\n  activatorEvent: Event | null\n) => React.CSSProperties['transition'] | undefined;\n\nexport interface Props {\n  adjustScale?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  dropAnimation?: DropAnimation | null | undefined;\n  style?: React.CSSProperties;\n  transition?: string | TransitionGetter;\n  modifiers?: Modifiers;\n  wrapperElement?: keyof JSX.IntrinsicElements;\n  zIndex?: number;\n}\n\nconst defaultTransition: TransitionGetter = (activatorEvent) => {\n  const isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nexport const defaultDropAnimation: DropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0,\n};\n\nexport const DragOverlay = React.memo(\n  ({\n    adjustScale = false,\n    children,\n    dropAnimation = defaultDropAnimation,\n    style: styleProp,\n    transition = defaultTransition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999,\n  }: Props) => {\n    const {\n      active,\n      activeNodeRect,\n      activeNodeClientRect,\n      containerNodeRect,\n      draggableNodes,\n      activatorEvent,\n      over,\n      overlayNode,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    } = useDndContext();\n    const transform = useContext(ActiveDraggableContext);\n    const modifiedTransform = applyModifiers(modifiers, {\n      active,\n      activeNodeRect: activeNodeClientRect,\n      draggingNodeRect: overlayNode.rect,\n      containerNodeRect,\n      over,\n      overlayNodeRect: overlayNode.rect,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      transform,\n      windowRect,\n    });\n    const derivedTransform = useDerivedTransform(\n      modifiedTransform,\n      activeNodeRect,\n      overlayNode.nodeRef.current\n    );\n    const isDragging = active !== null;\n    const intermediateTransform = derivedTransform ?? modifiedTransform;\n    const finalTransform = adjustScale\n      ? intermediateTransform\n      : {\n          ...intermediateTransform,\n          scaleX: 1,\n          scaleY: 1,\n        };\n    const style: React.CSSProperties | undefined = activeNodeRect\n      ? {\n          position: 'fixed',\n          width: activeNodeRect.width,\n          height: activeNodeRect.height,\n          top: activeNodeRect.top,\n          left: activeNodeRect.left,\n          zIndex,\n          transform: CSS.Transform.toString(finalTransform),\n          touchAction: 'none',\n          transformOrigin:\n            adjustScale && activatorEvent\n              ? getRelativeTransformOrigin(\n                  activatorEvent as MouseEvent | KeyboardEvent | TouchEvent,\n                  activeNodeRect\n                )\n              : undefined,\n          transition: derivedTransform\n            ? undefined\n            : typeof transition === 'function'\n            ? transition(activatorEvent)\n            : transition,\n          ...styleProp,\n        }\n      : undefined;\n    const attributes = isDragging\n      ? {\n          style,\n          children,\n          className,\n          transform: finalTransform,\n        }\n      : undefined;\n    const attributesSnapshot = useRef(attributes);\n    const derivedAttributes = attributes ?? attributesSnapshot.current;\n    const {children: finalChildren, transform: _, ...otherAttributes} =\n      derivedAttributes ?? {};\n    const prevActiveId = useRef(active?.id ?? null);\n    const dropAnimationComplete = useDropAnimation({\n      animate: Boolean(dropAnimation && prevActiveId.current && !active),\n      adjustScale,\n      activeId: prevActiveId.current,\n      draggableNodes,\n      duration: dropAnimation?.duration,\n      easing: dropAnimation?.easing,\n      dragSourceOpacity: dropAnimation?.dragSourceOpacity,\n      node: overlayNode.nodeRef.current,\n      transform: attributesSnapshot.current?.transform,\n    });\n    const shouldRender = Boolean(\n      finalChildren && (children || (dropAnimation && !dropAnimationComplete))\n    );\n\n    useEffect(() => {\n      if (active?.id !== prevActiveId.current) {\n        prevActiveId.current = active?.id ?? null;\n      }\n\n      if (active && attributesSnapshot.current !== attributes) {\n        attributesSnapshot.current = attributes;\n      }\n    }, [active, attributes]);\n\n    useEffect(() => {\n      if (dropAnimationComplete) {\n        attributesSnapshot.current = undefined;\n      }\n    }, [dropAnimationComplete]);\n\n    if (!shouldRender) {\n      return null;\n    }\n\n    return React.createElement(\n      wrapperElement,\n      {\n        ...otherAttributes,\n        ref: overlayNode.setRef,\n      },\n      finalChildren\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}