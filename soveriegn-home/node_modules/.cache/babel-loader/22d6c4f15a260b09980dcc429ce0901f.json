{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./GridGame.css\";\nimport { DndContext, useDraggable, DragOverlay } from '@dnd-kit/core';\nimport { Draggable } from './Draggable';\nimport { Droppable_Green } from './Droppable_green';\nimport { Droppable_white } from './Droppable_white';\nimport { Draggable2 } from './Draggable2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentTile = null;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\nfunction buildGrid() {\n  var grid = [];\n  var element = 1;\n\n  for (let y = 1; y < 11; y++) {\n    grid[y] = [];\n\n    for (let x = 1; x < 11; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\nfunction DraggableItem({\n  handle\n}, model) {\n  _s();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DraggableItem, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c = DraggableItem;\n\nfunction DraggableItem2({\n  handle\n}) {\n  _s2();\n\n  const {\n    isDragging,\n    setNodeRef,\n    listeners\n  } = useDraggable({\n    id: 'draggable-item2'\n  });\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    dragging: isDragging,\n    ref: setNodeRef,\n    handle: handle,\n    listeners: listeners,\n    style: {\n      opacity: isDragging ? 0 : undefined\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(DraggableItem2, \"nITU3/IULBhQ//L5WdiI3X+UXno=\", false, function () {\n  return [useDraggable];\n});\n\n_c2 = DraggableItem2;\nexport function GridGame({\n  modifiers\n}) {\n  _s3();\n\n  var num = \"-1\";\n  const grid = buildGrid();\n  const [parent, setParent] = useState(null);\n  const [parent2, setParent2] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isDragging2, setIsDragging2] = useState(false);\n\n  const draggable = /*#__PURE__*/_jsxDEV(DraggableItem, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 23\n  }, this);\n\n  const draggable2 = /*#__PURE__*/_jsxDEV(DraggableItem2, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 24\n  }, this); //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n  //this.populateGrid();\n  //this.createGrid(); \n  //const grid = Array(10).fill(Array(10).fill(\"A\"))\n  //const grid = Array(10).fill(\"A\")\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DndContext, {\n      modifiers: parent === null ? undefined : parent2 === null ? undefined : modifiers,\n      onDragStart: event => {\n        if (event.active.id == \"draggable-item\") {\n          setIsDragging(true);\n        } else {\n          setIsDragging2(true);\n        }\n      },\n      onDragEnd: ({\n        over\n      }) => {\n        if (isDragging == true) {\n          setParent(over ? over.id : null);\n          setIsDragging(false);\n        } else {\n          setParent2(over && isDragging2 == true ? over.id : null);\n          setIsDragging2(false);\n        }\n\n        currentTile = parent;\n      },\n      onDragCancel: () => {\n        setIsDragging(false);\n        setIsDragging2(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop\",\n        children: parent === null ? draggable : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drop\",\n        children: parent2 === null ? draggable2 : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map(row => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map(tile => {\n              var rowIndex = grid.indexOf(row);\n\n              if (Number(tile) % 2 == 0 && rowIndex % 2 == 0 || Number(tile) % 2 != 0 && rowIndex % 2 != 0) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Droppable_white, {\n                    id: tile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 27\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Droppable_Green, {\n                    id: tile,\n                    children: [parent === tile ? draggable : '', parent2 === tile ? draggable2 : '']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 30\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 27\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: [isDragging ? /*#__PURE__*/_jsxDEV(Draggable, {\n          dragging: true,\n          dragOverlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 31\n        }, this) : null, isDragging2 ? /*#__PURE__*/_jsxDEV(Draggable2, {\n          dragging: true,\n          dragOverlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 32\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 7\n  }, this);\n}\n\n_s3(GridGame, \"ThZ7f//OevCR9dNfAHbeRH7fX34=\");\n\n_c3 = GridGame;\nexport default GridGame; //<Tile />  \n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DraggableItem\");\n$RefreshReg$(_c2, \"DraggableItem2\");\n$RefreshReg$(_c3, \"GridGame\");","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/GridGame.tsx"],"names":["React","useState","DndContext","useDraggable","DragOverlay","Draggable","Droppable_Green","Droppable_white","Draggable2","currentTile","buildGrid","grid","element","y","x","String","DraggableItem","handle","model","isDragging","setNodeRef","listeners","id","opacity","undefined","DraggableItem2","GridGame","modifiers","num","parent","setParent","parent2","setParent2","setIsDragging","isDragging2","setIsDragging2","draggable","draggable2","event","active","over","map","row","tile","rowIndex","indexOf","Number"],"mappings":"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","sourcesContent":["import React, { PropsWithoutRef, useState } from 'react';\nimport \"./GridGame.css\";\nimport {\n  DndContext, \n  useDraggable, \n  DragEndEvent, \n  CollisionDetection as CollisionDetectionType, \n  Modifiers, \n  UniqueIdentifier,\n  DragOverlay,\n} from '@dnd-kit/core';\nimport {Draggable} from './Draggable';\nimport {Droppable_Green} from './Droppable_green';\nimport {Droppable_white} from './Droppable_white';\nimport {Draggable2} from './Draggable2';\n\ninterface Props {\n  modifiers?: Modifiers;\n  grid?: string[][];\n}\n\nvar currentTile = null;\n/*\nfunction Droppable(props) {\n  const {isOver, setNodeRef} = useDroppable({\n    id: props.id,\n  });\n  const style = {\n    opacity: isOver ? 0.5 : 1,\n  };\n\n  return (\n    <div className = \"drop\" ref={setNodeRef} style={style}>\n      {props.children}\n    </div>\n  );\n}\n*/\n/*\nfunction DragMain() {\n  const [parent, setParent] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const draggable = (\n    <Draggable id=\"draggable\">\n      drag\n    </Draggable>\n  );\n\n  return (\n    //<div className = \"back\">\n      <DndContext onDragEnd={handleDragEnd}>\n        {!parent ? draggable : false}\n          <Droppable key = {\"droppable\"} id = {\"droppable\"} dragging = {isDragging}>\n            {parent ? draggable : ''}\n          </Droppable>\n      </DndContext>\n    //</div>\n  );\n\n  function handleDragEnd(event: DragEndEvent) {\n    setParent(event.over ? !event.over.id : false);\n    //if (event.over && event.over.id === 'droppable') {\n      //setParent(true);\n    //}\n  }\n\n}\n*/\n\nfunction buildGrid() {\n  var grid: string[][] = [];\n  var element = 1;\n  for (let y = 1; y < 11; y++) {\n    grid[y] = [];\n    for (let x = 1; x < 11; x++) {\n      grid[y][x] = String(element);\n      element++;\n    }\n  }\n\n  return grid;\n}\n\n\ninterface DraggableProps {\n  handle?: boolean;\n}\n\nfunction DraggableItem({handle}: DraggableProps, model:{id:number;}) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item',\n  });\n\n   return (\n    <Draggable\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n    />\n  );\n}\n\n\nfunction DraggableItem2({handle}: DraggableProps) {\n  const {isDragging, setNodeRef, listeners} = useDraggable({\n    id: 'draggable-item2',\n  });\n\n   return (\n    <Draggable\n      dragging={isDragging}\n      ref={setNodeRef}\n      handle={handle}\n      listeners={listeners}\n      style={{\n        opacity: isDragging ? 0 : undefined,\n      }}\n   \n    />\n  );\n}\n\nexport function GridGame({modifiers,}: Props) {\n    var num = \"-1\";\n    const grid = buildGrid();\n    const [parent, setParent] = useState<UniqueIdentifier | null>(null);\n    const [parent2, setParent2] = useState<UniqueIdentifier | null>(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [isDragging2, setIsDragging2] = useState(false);\n    const draggable = <DraggableItem/>;\n    const draggable2 = <DraggableItem2 />;\n    \n   //const grid = Array(10).fill(Array(10).fill(<div className = \"square_green\"/>))\n\n    //this.populateGrid();\n    //this.createGrid(); \n   //const grid = Array(10).fill(Array(10).fill(\"A\"))\n    //const grid = Array(10).fill(\"A\")\n    return (\n      <div>\n      <DndContext \n        modifiers={\n          parent === null ? undefined: parent2 === null ? undefined: modifiers\n        }\n        onDragStart={(event) => {\n          if (event.active.id == \"draggable-item\") {\n            setIsDragging(true); \n          } else {\n            setIsDragging2(true);\n          } \n        }}\n        onDragEnd={({over}) => {\n          if (isDragging==true) {\n            setParent(over ? over.id : null);\n            setIsDragging(false);\n          } else {\n            setParent2(over && isDragging2==true ? over.id : null);\n            setIsDragging2(false);\n          }\n          currentTile = parent;\n        }}\n        onDragCancel={() => {setIsDragging(false); setIsDragging2(false);}}\n        > \n          <div className = \"drop\">\n              {parent === null ? draggable : null}\n          </div>\n          <div className = \"drop\">  \n              {parent2 === null ? draggable2 : null}\n          </div>\n          <div className = \"grid\">\n            \n            {grid.map((row: any[]) => { \n                return (\n                  <div>\n                    {row.map((tile:any) => {\n                      var rowIndex = grid.indexOf(row);\n                      if ((Number(tile)%2 == 0 && rowIndex%2 ==0) || (Number(tile)%2 != 0 && rowIndex%2 !=0)) {\n                        return (    \n                          <div>\n                            <Droppable_white id={tile}>\n\n                            </Droppable_white> \n                          </div> \n                        ); \n                      } else {\n                        return (    \n                          <div>\n                             <Droppable_Green id={tile}>\n                              {parent === tile ? draggable : ''}\n                              {parent2 === tile ? draggable2 : ''}\n                            </Droppable_Green> \n                          </div> \n                        ); \n                      }\n                     })}\n                  </div>\n                );\n            })}\n            \n             {/*draggable*/}\n            {/*<DragMain/>*/}\n  \n            </div>\n            <DragOverlay>\n                {isDragging ? <Draggable dragging dragOverlay /> : null}\n                {isDragging2 ? <Draggable2 dragging dragOverlay /> : null}\n            </DragOverlay>\n        \n        </DndContext> \n        </div>\n      \n    );\n}\n\n\nexport default GridGame;\n//<Tile />  "]},"metadata":{},"sourceType":"module"}