{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Desktop/sovereign-page/soveriegn-home/src/Draggable.tsx\";\nimport React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport styles from './Draggable.module.css';\nimport { Dimensions, TouchableHighlight } from 'react-native';\n/*\nexport function Draggable(props: any) {\n  const {attributes, listeners, setNodeRef, transform} = useDraggable({\n    id: props.id,\n  });\n  const style = transform ? {\n    transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n  } : undefined;\n\n  return (\n    <button \n    ref={setNodeRef} \n    style={style} \n    {...listeners} \n    {...attributes} \n    className=\"button\"\n    aria-label=\"Draggable\"\n    data-cypress=\"draggable-item\"\n    >\n      {props.children}\n    </button>\n  );\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let Axis;\n\n(function (Axis) {\n  Axis[Axis[\"All\"] = 0] = \"All\";\n  Axis[Axis[\"Vertical\"] = 1] = \"Vertical\";\n  Axis[Axis[\"Horizontal\"] = 2] = \"Horizontal\";\n})(Axis || (Axis = {}));\n\nexport const Draggable = /*#__PURE__*/forwardRef(_c = function Draggable({\n  axis,\n  dragOverlay,\n  dragging,\n  handle,\n  label,\n  listeners,\n  translate,\n  ...props\n}, ref) {\n  var _translate$x, _translate$y;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(styles.Draggable, dragOverlay && styles.dragOverlay, dragging && styles.dragging, handle && styles.handle),\n    style: {\n      '--translate-x': `${(_translate$x = translate === null || translate === void 0 ? void 0 : translate.x) !== null && _translate$x !== void 0 ? _translate$x : 0}px`,\n      '--translate-y': `${(_translate$y = translate === null || translate === void 0 ? void 0 : translate.y) !== null && _translate$y !== void 0 ? _translate$y : 0}px`\n    },\n    children: [/*#__PURE__*/_jsxDEV(TouchableHighlight, {\n      ref: ref,\n      ...props,\n      \"aria-label\": \"Draggable\",\n      \"data-cypress\": \"draggable-item\",\n      ...(handle ? {} : listeners),\n      style: {\n        borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\n        width: Dimensions.get('window').width * 0.5,\n        height: Dimensions.get('window').width * 0.5,\n        backgroundColor: '#f00',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: \"Drag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), label ? /*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this);\n});\n_c2 = Draggable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Draggable$forwardRef\");\n$RefreshReg$(_c2, \"Draggable\");","map":{"version":3,"sources":["/Users/michael/Desktop/sovereign-page/soveriegn-home/src/Draggable.tsx"],"names":["React","forwardRef","classNames","styles","Dimensions","TouchableHighlight","Axis","Draggable","axis","dragOverlay","dragging","handle","label","listeners","translate","props","ref","x","y","borderRadius","Math","round","get","width","height","backgroundColor","justifyContent","alignItems"],"mappings":";AACA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,SAASC,UAAT,EAAqBC,kBAArB,QAAqD,cAArD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;AAAAA,EAAAA,I,CAAAA,I;GAAAA,I,KAAAA,I;;AAiBZ,OAAO,MAAMC,SAAS,gBAAGN,UAAU,MACjC,SAASM,SAAT,CACE;AACEC,EAAAA,IADF;AAEEC,EAAAA,WAFF;AAGEC,EAAAA,QAHF;AAIEC,EAAAA,MAJF;AAKEC,EAAAA,KALF;AAMEC,EAAAA,SANF;AAOEC,EAAAA,SAPF;AAQE,KAAGC;AARL,CADF,EAWEC,GAXF,EAYE;AAAA;;AAGA,sBACE;AACE,IAAA,SAAS,EAAEd,UAAU,CACnBC,MAAM,CAACI,SADY,EAEnBE,WAAW,IAAIN,MAAM,CAACM,WAFH,EAGnBC,QAAQ,IAAIP,MAAM,CAACO,QAHA,EAInBC,MAAM,IAAIR,MAAM,CAACQ,MAJE,CADvB;AAOE,IAAA,KAAK,EACH;AACE,uBAAkB,GAAD,gBAAGG,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEG,CAAd,uDAAmB,CAAE,IADxC;AAEE,uBAAkB,GAAD,gBAAGH,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEI,CAAd,uDAAmB,CAAE;AAFxC,KARJ;AAAA,4BAcE,QAAC,kBAAD;AACE,MAAA,GAAG,EAAEF,GADP;AAAA,SAEMD,KAFN;AAGE,oBAAW,WAHb;AAIE,sBAAa,gBAJf;AAAA,UAKOJ,MAAM,GAAG,EAAH,GAAQE,SALrB;AAME,MAAA,KAAK,EAAI;AACPM,QAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAWjB,UAAU,CAACkB,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCnB,UAAU,CAACkB,GAAX,CAAe,QAAf,EAAyBE,MAArE,IAA+E,CADtF;AAEPD,QAAAA,KAAK,EAAEnB,UAAU,CAACkB,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC,GAFjC;AAGPC,QAAAA,MAAM,EAAEpB,UAAU,CAACkB,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC,GAHlC;AAIPE,QAAAA,eAAe,EAAC,MAJT;AAKPC,QAAAA,cAAc,EAAE,QALT;AAMPC,QAAAA,UAAU,EAAE;AANL,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,EAgCGf,KAAK,gBAAG;AAAA,gBAAQA;AAAR;AAAA;AAAA;AAAA;AAAA,YAAH,GAA4B,IAhCpC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CApDgC,CAA5B;MAAML,S","sourcesContent":["import type {DraggableSyntheticListeners, Translate} from '@dnd-kit/core';\nimport React, {forwardRef} from 'react';\nimport classNames from 'classnames';\nimport styles from './Draggable.module.css';\nimport { useDerivedTransform } from '@dnd-kit/core/dist/components/DragOverlay/hooks';\nimport { Dimensions, TouchableHighlight, Text } from 'react-native';\n \n/*\nexport function Draggable(props: any) {\n  const {attributes, listeners, setNodeRef, transform} = useDraggable({\n    id: props.id,\n  });\n  const style = transform ? {\n    transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n  } : undefined;\n\n  return (\n    <button \n    ref={setNodeRef} \n    style={style} \n    {...listeners} \n    {...attributes} \n    className=\"button\"\n    aria-label=\"Draggable\"\n    data-cypress=\"draggable-item\"\n    >\n      {props.children}\n    </button>\n  );\n}\n*/\n\nexport enum Axis {\n  All,\n  Vertical,\n  Horizontal,\n}\n\ninterface Props {\n  axis?: Axis;\n  dragOverlay?: boolean;\n  dragging?: boolean;\n  handle?: boolean;\n  label?: string;\n  listeners?: DraggableSyntheticListeners;\n  style?: React.CSSProperties;\n  translate?: Translate;\n}\n\nexport const Draggable = forwardRef<TouchableHighlight, Props>(\n  function Draggable(\n    {\n      axis,\n      dragOverlay,\n      dragging,\n      handle,\n      label,\n      listeners,\n      translate,\n      ...props\n    },\n    ref\n  ) {\n\n    \n    return (\n      <div\n        className={classNames(\n          styles.Draggable,\n          dragOverlay && styles.dragOverlay,\n          dragging && styles.dragging,\n          handle && styles.handle\n        )}\n        style={\n          {\n            '--translate-x': `${translate?.x ?? 0}px`,\n            '--translate-y': `${translate?.y ?? 0}px`,\n          } as React.CSSProperties\n        }\n      >\n        <TouchableHighlight\n          ref={ref}\n          {...props}\n          aria-label=\"Draggable\"\n          data-cypress=\"draggable-item\"\n          {...(handle ? {} : listeners)}\n          style = {{\n            borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\n            width: Dimensions.get('window').width * 0.5,\n            height: Dimensions.get('window').width * 0.5,\n            backgroundColor:'#f00',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}\n        >\n          \n          Drag\n        </TouchableHighlight>\n        {label ? <label>{label}</label> : null}\n      </div>\n    );\n  }\n);\n\n\n"]},"metadata":{},"sourceType":"module"}